{"ast":null,"code":"import _classCallCheck from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { hasAttributeAndIsNotEmpty, setAttributes } from '../utils/dom.js';\nimport { arrayTail } from '../utils/array.js';\n/**\n * FocusTrapTracker is a static class that keeps track of the active element with focus trap,\n * in case there are multiple in a given page.\n */\n\nexport var CDS_FOCUS_TRAP_ID_ATTR = 'focus-trap-id';\nexport var CDS_FOCUS_TRAP_DOCUMENT_ATTR = 'cds-focus-trap-ids';\nexport var FocusTrapTracker = /*#__PURE__*/function () {\n  function FocusTrapTracker() {\n    _classCallCheck(this, FocusTrapTracker);\n  }\n\n  _createClass(FocusTrapTracker, null, [{\n    key: \"getDocroot\",\n    value: function getDocroot() {\n      return document.documentElement;\n    }\n  }, {\n    key: \"getTrapIds\",\n    value: function getTrapIds() {\n      var docroot = this.getDocroot();\n\n      if (hasAttributeAndIsNotEmpty(docroot, CDS_FOCUS_TRAP_DOCUMENT_ATTR)) {\n        // the function in the conditional handles all nil references. zero chance of null making it through here.\n        var myAttribute = docroot.getAttribute(CDS_FOCUS_TRAP_DOCUMENT_ATTR) || ''; // TS forcing us to write an unreachable codepath. this is where monads would be useful.\n\n        return myAttribute === '' ? [] : myAttribute.split(' ');\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"setTrapIds\",\n    value: function setTrapIds(trapIds) {\n      var myTrapIds = trapIds.length > 0 ? trapIds.join(' ') : false;\n      setAttributes(this.getDocroot(), [CDS_FOCUS_TRAP_DOCUMENT_ATTR, myTrapIds]);\n    }\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent(myTrapId) {\n      if (myTrapId === '') {\n        return;\n      }\n\n      var trapIds = this.getTrapIds(); // this is a just-in-case situation. we should never encounter it.\n      // but in the event that we do, this guard will ensure no id is in the\n      // focus trap list more than once.\n\n      if (arrayTail(trapIds) === myTrapId) {\n        return;\n      }\n\n      var existingIndex = trapIds.indexOf(myTrapId);\n\n      if (existingIndex > -1) {\n        trapIds.splice(existingIndex, 1);\n      }\n\n      trapIds.push(myTrapId);\n      this.setTrapIds(trapIds);\n    }\n  }, {\n    key: \"activatePreviousCurrent\",\n    value: function activatePreviousCurrent() {\n      var trapIds = this.getTrapIds();\n      trapIds.pop();\n      this.setTrapIds(trapIds);\n    }\n  }, {\n    key: \"getCurrentTrapId\",\n    value: function getCurrentTrapId() {\n      return arrayTail(this.getTrapIds()) || '';\n    }\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var docroot = this.getDocroot();\n      var currentId = this.getCurrentTrapId();\n\n      if (currentId !== '') {\n        return docroot.querySelector(\"[\".concat(CDS_FOCUS_TRAP_ID_ATTR, \"=\\\"\").concat(currentId, \"\\\"]\"));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return FocusTrapTracker;\n}();","map":null,"metadata":{},"sourceType":"module"}