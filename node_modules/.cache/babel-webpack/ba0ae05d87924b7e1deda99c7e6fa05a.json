{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { property } from 'lit-element'; // Legacy TS Decorator\n\nfunction legacyI18n(descriptor, protoOrDescriptor, name) {\n  var desc = Object.defineProperty(protoOrDescriptor, name, descriptor);\n  return property({\n    type: Object,\n    attribute: 'cds-i18n'\n  })(desc, name);\n} // TC39 Decorators proposal\n\n\nfunction standardI18n(descriptor, element) {\n  var desc = {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n  return property({\n    type: Object\n  })(desc, name);\n}\n/**\n * A property decorator which accesses a set of string values for use\n * inside the element's template. The values can be overridden at runtime\n * by changing the property value that's reflected through the attribute value.\n *\n * @example\n *\n *     class MyElement {\n *       @i18n()\n *       i18n = {\n *         \"open\" : \"Open my element\",\n *         \"close\" : \"Close my element\"\n *       };\n *     }\n *\n */\n\n\nexport function i18n() {\n  return function (protoOrDescriptor, name) {\n    var descriptor = {\n      get: function get() {\n        return this.__i18n;\n      },\n      set: function set(value) {\n        if (!this.__i18n) {\n          this.__i18n = value;\n        } else {\n          this.__i18n = Object.assign(Object.assign({}, this.__i18n), value);\n        }\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyI18n(descriptor, protoOrDescriptor, name) : standardI18n(descriptor, protoOrDescriptor);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}