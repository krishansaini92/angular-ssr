{"ast":null,"code":"import _slicedToArray from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport is from 'ramda/es/is.js';\nimport isEmpty from 'ramda/es/isEmpty.js';\nimport isNil from 'ramda/es/isNil.js';\nexport function isNilOrEmpty(val) {\n  return isNil(val) || isEmpty(val);\n}\nexport function isString(val) {\n  return is(String, val);\n}\nexport function isNumericString(val) {\n  return isString(val) && !isEmpty(val.trim()) && +val === +val;\n}\nexport function isStringOrNil(val) {\n  return is(String, val) || isNil(val);\n}\nexport function isStringAndNotNilOrEmpty(val) {\n  return isString(val) && !isNil(val) && !isEmpty(val);\n}\nexport function isObject(val) {\n  return is(Object, val);\n}\nexport function isMap(val) {\n  return is(Map, val);\n}\nexport function isObjectAndNotNilOrEmpty(val) {\n  return !isNilOrEmpty(val) && isObject(val);\n}\nexport function hasPropertyChanged(val, oldVal) {\n  return val !== oldVal;\n} // marks nil values (undefined, null, empty string) as changed\n\nexport function hasStringPropertyChanged(val, oldVal) {\n  return isStringOrNil(val) && hasPropertyChanged(val, oldVal);\n} // ignores nil values when checking for changes\n\nexport function hasStringPropertyChangedAndNotNil(val, oldVal) {\n  return !isNilOrEmpty(val) && hasPropertyChanged(val, oldVal);\n}\nexport function getEnumValues(enumeration) {\n  return Object.values(enumeration);\n}\nexport function createId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_';\n  return \"\".concat(prefix).concat(Math.random().toString(36).substr(2, 9));\n} // used by deepClone() tested through integration\n\nfunction cloneMap(mp) {\n  var clonedMap = new Map();\n\n  var _iterator = _createForOfIteratorHelper(mp),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          val = _step$value[1];\n\n      if (isMap(val)) {\n        clonedMap.set(key, cloneMap(val));\n      } else {\n        clonedMap.set(key, val);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return clonedMap;\n}\n\nexport function deepClone(obj) {\n  // this will clone almost anything (maps, arrays, objects, etc.) to the lowest of the low levels\n  // be careful using this carelessly b/c it CAN have performance implications!\n  return isMap(obj) ? cloneMap(obj) : JSON.parse(JSON.stringify(obj));\n}","map":null,"metadata":{},"sourceType":"module"}