{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// Legacy TS Decorator\nfunction legacyEvent(descriptor, protoOrDescriptor, name) {\n  Object.defineProperty(protoOrDescriptor, name, descriptor);\n} // TC39 Decorators proposal\n\n\nfunction standardEvent(descriptor, element) {\n  return {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n}\n/**\n * Appends a global `<style>` tag to the light DOM of a given custom element.\n * This is useful for when styles need to be applied that are not supported\n * withing a `::slotted()` selector such as ::-vendor style selectors.\n */\n\n\nexport function globalStyle() {\n  return function (protoOrDescriptor, name) {\n    var targetConnectedCallback = protoOrDescriptor.connectedCallback;\n\n    function connectedCallback() {\n      this[\"__\".concat(name, \"StyleTag\")] = document.createElement('style');\n      this.prepend(this[\"__\".concat(name, \"StyleTag\")]);\n      this[\"__\".concat(name, \"StyleTag\")].innerText = this[\"__\".concat(name, \"GlobalStyle\")].toString();\n\n      if (targetConnectedCallback) {\n        targetConnectedCallback.apply(this);\n      }\n    }\n\n    protoOrDescriptor.connectedCallback = connectedCallback;\n\n    var setter = function setter(value) {\n      this[\"__\".concat(name, \"GlobalStyle\")] = value;\n    };\n\n    var descriptor = {\n      set: setter,\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyEvent(descriptor, protoOrDescriptor, name) : standardEvent(descriptor, protoOrDescriptor);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}