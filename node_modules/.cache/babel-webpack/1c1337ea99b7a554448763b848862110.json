{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Returns a promise when all components have completed rendering one cycle.\n */\nexport function childrenUpdateComplete(elements) {\n  return Promise.all(Array.from(elements).map(function (e) {\n    return e.updateComplete;\n  }));\n}\n/**\n * Set all properties that are in common with a parent group and child components.\n * This is helpful when providing convenience group/wrapper components that set the state\n * of child slotted elements (cds-form-group, cds-control-group). Typically call\n * during the `firstUpdated` or `updated` lifecycle.\n */\n\nexport function syncDefinedProps(props, source, targets) {\n  props.forEach(function (_value, key) {\n    return targets.filter(function (t) {\n      return t && t[key] !== undefined;\n    }).forEach(function (t) {\n      return t[key] = source[key];\n    });\n  });\n}\n/**\n * Set all common properties between two instances with given conditions. This is\n * helpful for setting child component properties from the parent given certain\n * conditions.\n */\n\nexport function syncProps(target, source, conditions) {\n  Object.keys(conditions).filter(function (c) {\n    return conditions[c];\n  }).forEach(function (c) {\n    return target[c] = source[c];\n  });\n}","map":null,"metadata":{},"sourceType":"module"}