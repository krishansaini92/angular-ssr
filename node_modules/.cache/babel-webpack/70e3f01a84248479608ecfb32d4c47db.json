{"ast":null,"code":"import _classCallCheck from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport var marker = \"{{lit-\".concat(String(Math.random()).slice(2), \"}}\");\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\n\nexport var nodeMarker = \"<!--\".concat(marker, \"-->\");\nexport var markerRegex = new RegExp(\"\".concat(marker, \"|\").concat(nodeMarker));\n/**\n * Suffix appended to all bound attribute names.\n */\n\nexport var boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\n\nexport var Template = function Template(result, element) {\n  _classCallCheck(this, Template);\n\n  this.parts = [];\n  this.element = element;\n  var nodesToRemove = [];\n  var stack = []; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n\n  var walker = document.createTreeWalker(element.content, 133\n  /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */\n  , null, false); // Keeps track of the last index associated with a part. We try to delete\n  // unnecessary nodes, but we never want to associate two different parts\n  // to the same index. They must have a constant node between.\n\n  var lastPartIndex = 0;\n  var index = -1;\n  var partIndex = 0;\n  var strings = result.strings,\n      length = result.values.length;\n\n  while (partIndex < length) {\n    var node = walker.nextNode();\n\n    if (node === null) {\n      // We've exhausted the content inside a nested template element.\n      // Because we still have parts (the outer for-loop), we know:\n      // - There is a template in the stack\n      // - The walker will find a nextNode outside the template\n      walker.currentNode = stack.pop();\n      continue;\n    }\n\n    index++;\n\n    if (node.nodeType === 1\n    /* Node.ELEMENT_NODE */\n    ) {\n        if (node.hasAttributes()) {\n          var attributes = node.attributes;\n          var _length = attributes.length; // Per\n          // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n          // attributes are not guaranteed to be returned in document order.\n          // In particular, Edge/IE can return them out of order, so we cannot\n          // assume a correspondence between part index and attribute index.\n\n          var count = 0;\n\n          for (var i = 0; i < _length; i++) {\n            if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n              count++;\n            }\n          }\n\n          while (count-- > 0) {\n            // Get the template literal section leading up to the first\n            // expression in this attribute\n            var stringForPart = strings[partIndex]; // Find the attribute name\n\n            var name = lastAttributeNameRegex.exec(stringForPart)[2]; // Find the corresponding attribute\n            // All bound attributes have had a suffix added in\n            // TemplateResult#getHTML to opt out of special attribute\n            // handling. To look up the attribute value we also need to add\n            // the suffix.\n\n            var attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n            var attributeValue = node.getAttribute(attributeLookupName);\n            node.removeAttribute(attributeLookupName);\n            var statics = attributeValue.split(markerRegex);\n            this.parts.push({\n              type: 'attribute',\n              index: index,\n              name: name,\n              strings: statics\n            });\n            partIndex += statics.length - 1;\n          }\n        }\n\n        if (node.tagName === 'TEMPLATE') {\n          stack.push(node);\n          walker.currentNode = node.content;\n        }\n      } else if (node.nodeType === 3\n    /* Node.TEXT_NODE */\n    ) {\n        var data = node.data;\n\n        if (data.indexOf(marker) >= 0) {\n          var parent = node.parentNode;\n\n          var _strings = data.split(markerRegex);\n\n          var lastIndex = _strings.length - 1; // Generate a new text node for each literal section\n          // These nodes are also used as the markers for node parts\n\n          for (var _i = 0; _i < lastIndex; _i++) {\n            var insert = void 0;\n            var s = _strings[_i];\n\n            if (s === '') {\n              insert = createMarker();\n            } else {\n              var match = lastAttributeNameRegex.exec(s);\n\n              if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                s = s.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n              }\n\n              insert = document.createTextNode(s);\n            }\n\n            parent.insertBefore(insert, node);\n            this.parts.push({\n              type: 'node',\n              index: ++index\n            });\n          } // If there's no text, we must insert a comment to mark our place.\n          // Else, we can trust it will stick around after cloning.\n\n\n          if (_strings[lastIndex] === '') {\n            parent.insertBefore(createMarker(), node);\n            nodesToRemove.push(node);\n          } else {\n            node.data = _strings[lastIndex];\n          } // We have a part for each match found\n\n\n          partIndex += lastIndex;\n        }\n      } else if (node.nodeType === 8\n    /* Node.COMMENT_NODE */\n    ) {\n        if (node.data === marker) {\n          var _parent = node.parentNode; // Add a new marker node to be the startNode of the Part if any of\n          // the following are true:\n          //  * We don't have a previousSibling\n          //  * The previousSibling is already the start of a previous part\n\n          if (node.previousSibling === null || index === lastPartIndex) {\n            index++;\n\n            _parent.insertBefore(createMarker(), node);\n          }\n\n          lastPartIndex = index;\n          this.parts.push({\n            type: 'node',\n            index: index\n          }); // If we don't have a nextSibling, keep this node so we have an end.\n          // Else, we can remove it to save future costs.\n\n          if (node.nextSibling === null) {\n            node.data = '';\n          } else {\n            nodesToRemove.push(node);\n            index--;\n          }\n\n          partIndex++;\n        } else {\n          var _i2 = -1;\n\n          while ((_i2 = node.data.indexOf(marker, _i2 + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            // TODO (justinfagnani): consider whether it's even worth it to\n            // make bindings in comments work\n            this.parts.push({\n              type: 'node',\n              index: -1\n            });\n            partIndex++;\n          }\n        }\n      }\n  } // Remove text binding nodes after the walk to not disturb the TreeWalker\n\n\n  for (var _i3 = 0, _nodesToRemove = nodesToRemove; _i3 < _nodesToRemove.length; _i3++) {\n    var n = _nodesToRemove[_i3];\n    n.parentNode.removeChild(n);\n  }\n};\n\nvar endsWith = function endsWith(str, suffix) {\n  var index = str.length - suffix.length;\n  return index >= 0 && str.slice(index) === suffix;\n};\n\nexport var isTemplatePartActive = function isTemplatePartActive(part) {\n  return part.index !== -1;\n}; // Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\n\nexport var createMarker = function createMarker() {\n  return document.createComment('');\n};\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\n\nexport var lastAttributeNameRegex = // eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;","map":null,"metadata":{},"sourceType":"module"}