{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nexport function elementResize(element, callbackFn) {\n  var observer = new ResizeObserver(function () {\n    return callbackFn();\n  });\n  observer.observe(element);\n  observer.__testTrigger = callbackFn; // hook to trigger resize event as ResizeObserver does not run in headless chrome.\n\n  return observer;\n}\n/**\n * Given a ResponsiveComponent this function will loop through a list of layout\n * options and change the layout of the component until the components layout\n * condition is satisfied.\n */\n\nexport function updateComponentLayout(component, layoutConfig, fn) {\n  return elementResize(component, function () {\n    if (component.responsive) {\n      calculateOptimalLayout(component, layoutConfig).then(function (updated) {\n        if (updated) {\n          fn();\n        }\n      });\n    }\n  });\n}\n\nfunction calculateOptimalLayout(component, layoutConfig) {\n  return component.updateComplete.then(function () {\n    var currentLayout = component.layout;\n    component.layout = layoutConfig.layouts[0];\n    return layoutConfig.layouts.reduce(function (prev, next) {\n      return prev.then(function () {\n        if (component.layout === layoutConfig.initialLayout) {\n          return next;\n        } else {\n          var _prev = component.layout;\n          component.layout = next;\n          return component.updateComplete.then(function () {\n            component.layout = component.layoutStable ? component.layout : _prev;\n            return next;\n          });\n        }\n      });\n    }, Promise.resolve(layoutConfig.layouts[0])).then(function () {\n      return currentLayout !== component.layout;\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}