{"ast":null,"code":"import _slicedToArray from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { existsIn } from '@cds/core/internal';\nimport has from 'ramda/es/has.js';\nimport { renderIcon } from '../icon.renderer.js';\nexport function addIcons(shapes, registry) {\n  shapes.forEach(function (s) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    addIcon(s, registry);\n  });\n}\nexport function hasIcon(shapeName, registry) {\n  return has(shapeName, registry);\n}\nexport function getIcon(shapeName, registry) {\n  return registry[shapeName] ? registry[shapeName] : registry.unknown;\n}\n\nfunction addIconToRegistry(shape, registry) {\n  var _shape = _slicedToArray(shape, 2),\n      shapeName = _shape[0],\n      template = _shape[1];\n\n  registry[shapeName] = renderIcon(template);\n}\n\nexport function addIcon(shape, registry) {\n  var _shape2 = _slicedToArray(shape, 1),\n      shapeName = _shape2[0];\n\n  if (!hasIcon(shapeName, registry)) {\n    addIconToRegistry(shape, registry);\n  }\n}\nexport function setIconAlias(shapeName, aliasName, registry) {\n  if (existsIn([shapeName], registry)) {\n    Object.defineProperty(registry, aliasName, {\n      get: function get() {\n        return registry[shapeName];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}\nexport function setIconAliases(iconAlias, registry) {\n  if (registry[iconAlias[0]]) {\n    iconAlias[1].forEach(function (a) {\n      setIconAlias(iconAlias[0], a, registry);\n    });\n  }\n}\nexport function legacyAlias(aliases, registry) {\n  for (var shapeNameKey in aliases) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (aliases.hasOwnProperty(shapeNameKey)) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (registry.hasOwnProperty(shapeNameKey)) {\n        setIconAliases([shapeNameKey, aliases[shapeNameKey]], registry);\n      } else {\n        throw new Error(\"An icon \\\"\".concat(shapeNameKey, \"\\\" you are trying to set aliases to doesn't exist in Clarity Icons.\"));\n      }\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}