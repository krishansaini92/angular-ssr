{"ast":null,"code":"import _classCallCheck from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { LitElement } from 'lit-element';\nimport { CDS_FOCUS_TRAP_ID_ATTR, FocusTrapTracker } from '../services/focus-trap-tracker.service.js';\nimport { isHTMLElement, isFocusable } from './dom.js';\nimport { createId } from './identity.js';\nexport function refocusIfOutsideFocusTrapElement(focusedElement, focusTrapElement, elementToRefocus) {\n  var focusTrapIsCurrent = FocusTrapTracker.getCurrent() === focusTrapElement;\n  var elementToFocusIsOutsideFocusTrap = elementIsOutsideFocusTrapElement(focusedElement, focusTrapElement);\n\n  if (focusTrapIsCurrent && elementToFocusIsOutsideFocusTrap) {\n    elementToRefocus = elementToRefocus || focusTrapElement;\n    elementToRefocus.focus();\n  } else {\n    focusedElement.focus();\n  }\n}\nexport function elementIsOutsideFocusTrapElement(focusedElement, focusTrapElement) {\n  if (focusedElement === focusTrapElement.topReboundElement || focusedElement === focusTrapElement.bottomReboundElement) {\n    return true;\n  }\n\n  var elementIsInFocusTrapLightDom = focusTrapElement.contains(focusedElement);\n\n  if (elementIsInFocusTrapLightDom) {\n    return false;\n  }\n\n  if (focusTrapElement.shadowRoot !== null && focusTrapElement.shadowRoot.contains(focusedElement)) {\n    return false;\n  }\n\n  return true;\n}\nexport function createFocusTrapReboundElement() {\n  var offScreenSpan = document.createElement('span');\n  offScreenSpan.setAttribute('tabindex', '0');\n  offScreenSpan.classList.add('offscreen-focus-rebounder');\n  return offScreenSpan;\n}\nexport function addReboundElementsToFocusTrapElement(focusTrapElement) {\n  if (focusTrapElement && !focusTrapElement.topReboundElement && !focusTrapElement.bottomReboundElement) {\n    focusTrapElement.topReboundElement = createFocusTrapReboundElement();\n    focusTrapElement.bottomReboundElement = createFocusTrapReboundElement();\n    var parent = focusTrapElement.parentElement;\n    var sibling = focusTrapElement.nextSibling;\n\n    if (parent) {\n      parent.insertBefore(focusTrapElement.topReboundElement, focusTrapElement);\n\n      if (sibling) {\n        parent.insertBefore(focusTrapElement.bottomReboundElement, sibling);\n      } else {\n        parent.appendChild(focusTrapElement.bottomReboundElement);\n      }\n    }\n  }\n}\nexport function removeReboundElementsFromFocusTrapElement(focusTrapElement) {\n  if (focusTrapElement) {\n    var parent = focusTrapElement.parentElement;\n\n    if (parent) {\n      var topRebound = focusTrapElement.topReboundElement;\n      var bottomRebound = focusTrapElement.bottomReboundElement;\n\n      if (topRebound) {\n        parent.removeChild(topRebound);\n      }\n\n      if (bottomRebound) {\n        parent.removeChild(bottomRebound);\n      }\n    } // These are here to to make sure that we completely delete all traces of the removed DOM objects.\n\n\n    delete focusTrapElement.topReboundElement;\n    delete focusTrapElement.bottomReboundElement;\n  }\n} // this helper exists to enable the focus trap class to handle vanilla html elements\n// it's primary concern is to keep TS happy.\n// end users should prefer using the CdsBaseFocusTrap component to this method.\n// but it exists...\n\nexport function castHtmlElementToFocusTrapElement(el) {\n  return el;\n}\nexport var FocusTrap = /*#__PURE__*/function () {\n  function FocusTrap(hostElement) {\n    _classCallCheck(this, FocusTrap);\n\n    this.active = false;\n    hostElement = castHtmlElementToFocusTrapElement(hostElement);\n\n    if (!hostElement.focusTrapId) {\n      hostElement.focusTrapId = createId();\n    } // @deprecation\n    // reflect attr for non-Lit Element traps\n    // IMPORTANT! Using something other than a LitElement will break in React.\n    // The preference should be to use the CdsBaseFocusTrap component\n    // If that is not possible, avoid passing HTMLElement through here\n\n\n    if (!(hostElement instanceof LitElement) && !hostElement.hasAttribute(CDS_FOCUS_TRAP_ID_ATTR)) {\n      hostElement.setAttribute(CDS_FOCUS_TRAP_ID_ATTR, hostElement.focusTrapId);\n    }\n\n    this.focusTrapElement = hostElement;\n  }\n\n  _createClass(FocusTrap, [{\n    key: \"enableFocusTrap\",\n    value: function enableFocusTrap() {\n      var _this = this;\n\n      var fte = this.focusTrapElement;\n      var firstFocusElement = fte.querySelector('[cds-first-focus]');\n      var contentWrapper = fte.shadowRoot ? fte.shadowRoot.querySelector('.private-host[tabindex]') : null;\n      var activeEl = document.activeElement;\n\n      if (FocusTrapTracker.getCurrent() === fte) {\n        throw new Error('Focus trap is already enabled for this instance.');\n      }\n\n      this.firstFocusElement = firstFocusElement || contentWrapper || this.focusTrapElement;\n      addReboundElementsToFocusTrapElement(fte);\n\n      if (!isFocusable(fte)) {\n        fte.setAttribute('tabindex', '-1');\n      }\n\n      if (activeEl && isHTMLElement(activeEl)) {\n        this.previousFocus = activeEl;\n      }\n\n      FocusTrapTracker.setCurrent(fte.focusTrapId); // setTimeout here is required for Safari which may try to set focus on\n      // element before it is visible...\n\n      var focusTimer = setTimeout(function () {\n        _this.firstFocusElement.focus();\n\n        clearTimeout(focusTimer);\n      }, 10);\n      this.onFocusInEvent = this.onFocusIn.bind(this);\n      document.addEventListener('focusin', this.onFocusInEvent);\n      this.active = true;\n    }\n  }, {\n    key: \"removeFocusTrap\",\n    value: function removeFocusTrap() {\n      document.removeEventListener('focusin', this.onFocusInEvent);\n      removeReboundElementsFromFocusTrapElement(this.focusTrapElement);\n      FocusTrapTracker.activatePreviousCurrent();\n      this.active = false;\n\n      if (this.previousFocus) {\n        this.previousFocus.focus();\n      }\n    }\n  }, {\n    key: \"onFocusIn\",\n    value: function onFocusIn(event) {\n      refocusIfOutsideFocusTrapElement(event.composedPath()[0], this.focusTrapElement, this.firstFocusElement);\n    }\n  }]);\n\n  return FocusTrap;\n}();","map":null,"metadata":{},"sourceType":"module"}