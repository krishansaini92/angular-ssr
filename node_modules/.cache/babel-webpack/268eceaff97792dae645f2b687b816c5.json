{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nexport function transformToString(delimiter, fns) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return fns.map(function (fn) {\n    return fn.apply(void 0, args);\n  }).join(delimiter).trim();\n} // have to go this route because ramda curry throws typescript for loops\n\nexport function transformToSpacedString(fns) {\n  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  return transformToString.apply(void 0, [' ', fns].concat(args));\n}\nexport function transformToUnspacedString(fns) {\n  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  return transformToString.apply(void 0, ['', fns].concat(args));\n}\nexport function camelCaseToKebabCase(value) {\n  return value.replace(/[A-Z]/g, function (l) {\n    return \"-\".concat(l.toLowerCase());\n  });\n}\nexport function kebabCaseToCamelCase(str) {\n  return str.split('-').map(function (item, index) {\n    return index ? item.charAt(0).toUpperCase() + item.slice(1).toLowerCase() : item;\n  }).join('');\n}\nexport function kebabCaseToPascalCase(string) {\n  var camelCase = kebabCaseToCamelCase(string);\n  return capitalizeFirstLetter(camelCase);\n}\n/**\n * Take a object map of css properties and if value concatenate string of all computed values\n * Useful for dynamic style tags in lit-html templates\n */\n\nexport function setStyles(styles) {\n  return createPropStyleSelectors(Object.keys(styles), styles);\n}\nexport function setPropStyles(styles) {\n  return createPropStyleSelectors(Object.keys(styles).filter(function (prop) {\n    return prop.startsWith('--');\n  }), styles);\n}\n\nfunction createPropStyleSelectors(props, styles) {\n  return props.reduce(function (allStyles, prop) {\n    return \"\".concat(allStyles).concat(styles[prop] ? \"\".concat(prop, \":\").concat(styles[prop], \";\") : '');\n  }, '');\n}\n\nexport function capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n/** Used for Storybook docs to define knob group for css properties */\n\nexport var cssGroup = 'CSS Custom Properties';\n/** Used for Storybook docs to define knob group for JavaScript properties */\n\nexport var propertiesGroup = 'Default Properties';","map":null,"metadata":{},"sourceType":"module"}