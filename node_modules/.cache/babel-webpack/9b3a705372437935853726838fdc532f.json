{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { LogService } from '../services/log.service.js'; // Slot Query decorators are similar to the query decorator in lit-element.\n// Instead of querying the component template they query the content slot of the component.\n\nvar legacyQuery = function legacyQuery(descriptor, proto, name) {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nvar standardQuery = function standardQuery(descriptor, element) {\n  return {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n};\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\n\n\nexport function querySlot(selector, config) {\n  return function (protoOrDescriptor, name) {\n    var targetFirstUpdated = protoOrDescriptor.firstUpdated;\n\n    function firstUpdated() {\n      var ref = this.querySelector(selector);\n\n      if (!ref && (config === null || config === void 0 ? void 0 : config.required)) {\n        var message = config.requiredMessage || \"The <\".concat(selector, \"> element is required to use <\").concat(this.tagName.toLocaleLowerCase(), \">\");\n\n        if (config.required === 'error') {\n          throw new Error(message);\n        } else {\n          LogService.warn(message, this);\n        }\n      }\n\n      if ((config === null || config === void 0 ? void 0 : config.assign) && (ref === null || ref === void 0 ? void 0 : ref.hasAttribute('slot')) === false) {\n        ref.setAttribute('slot', config.assign);\n      }\n\n      if (targetFirstUpdated) {\n        targetFirstUpdated.apply(this);\n      }\n    }\n\n    protoOrDescriptor.firstUpdated = firstUpdated;\n    var descriptor = {\n      get: function get() {\n        return this.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's light DOM Slot.\n *\n * @ExportDecoratedItems\n */\n\nexport function querySlotAll(selector, config) {\n  return function (protoOrDescriptor, name) {\n    var targetFirstUpdated = protoOrDescriptor.firstUpdated;\n\n    function firstUpdated(props) {\n      if (config === null || config === void 0 ? void 0 : config.assign) {\n        Array.from(this.querySelectorAll(selector)).filter(function (i) {\n          return !i.hasAttribute('slot');\n        }).forEach(function (i) {\n          return i.setAttribute('slot', config.assign);\n        });\n      }\n\n      if (targetFirstUpdated) {\n        targetFirstUpdated.apply(this, [props]);\n      }\n    }\n\n    protoOrDescriptor.firstUpdated = firstUpdated;\n    var descriptor = {\n      get: function get() {\n        return this.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}