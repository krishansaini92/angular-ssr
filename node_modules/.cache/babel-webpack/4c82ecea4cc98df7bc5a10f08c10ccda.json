{"ast":null,"code":"import _slicedToArray from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nexport function hasClassnames(el) {\n  for (var _len = arguments.length, classNames = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    classNames[_key - 1] = arguments[_key];\n  }\n\n  return classNames.filter(function (cn) {\n    return el.classList.contains(cn);\n  }).length === classNames.length;\n}\nexport function addClassnames(el) {\n  for (var _len2 = arguments.length, classNames = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    classNames[_key2 - 1] = arguments[_key2];\n  }\n\n  classNames.forEach(function (cn) {\n    el.classList.add(cn);\n  });\n  return el;\n}\nexport function removeClassnames(el) {\n  for (var _len3 = arguments.length, classNames = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    classNames[_key3 - 1] = arguments[_key3];\n  }\n\n  classNames.forEach(function (cn) {\n    el.classList.remove(cn);\n  });\n  return el;\n}\nexport function removeClassnamesUnless(el, classnamesToRemove, classnamesToKeep) {\n  var filteredClassnamesToRemove = classnamesToRemove.filter(function (cn) {\n    return classnamesToKeep.indexOf(cn) < 0;\n  });\n  return removeClassnames.apply(void 0, [el].concat(_toConsumableArray(filteredClassnamesToRemove)));\n}\nexport function updateElementStyles(el) {\n  for (var _len4 = arguments.length, styleTuples = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    styleTuples[_key4 - 1] = arguments[_key4];\n  }\n\n  styleTuples.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        styleKey = _ref2[0],\n        value = _ref2[1];\n\n    el.style[styleKey] = value;\n  });\n  return el;\n}\nexport function pxToRem(pxValue) {\n  var baseProp = window.getComputedStyle(document.body, null).getPropertyValue('--cds-global-typography-base-font-size');\n  var baseFontSize = 16 * parseInt(baseProp !== '' ? baseProp : '100%') / 100;\n  return \"\".concat(pxValue / baseFontSize, \"rem\");\n}","map":null,"metadata":{},"sourceType":"module"}