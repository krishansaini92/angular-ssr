{"ast":null,"code":"/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { property as prop } from 'lit-element';\nimport { camelCaseToKebabCase, kebabCaseToPascalCase, capitalizeFirstLetter } from '../utils/string.js';\nimport { LogService } from '../services/log.service.js';\nimport { getAngularVersion, getReactVersion, getVueVersion } from '../utils/framework.js';\nimport { isNilOrEmpty } from '../utils/identity.js';\n/**\n * https://developers.google.com/web/fundamentals/web-components/best-practices\n */\n\nexport function getDefaultOptions(propertyKey, options) {\n  var type = options ? options.type : options;\n\n  switch (type) {\n    case Array:\n      return Object.assign({\n        reflect: false\n      }, options);\n\n    case Object:\n      return Object.assign({\n        reflect: false\n      }, options);\n\n    case String:\n      return Object.assign({\n        reflect: true,\n        attribute: camelCaseToKebabCase(propertyKey),\n        converter: {\n          toAttribute: function toAttribute(value) {\n            return value ? value : null;\n          }\n        }\n      }, options);\n\n    case Number:\n      return Object.assign({\n        reflect: true,\n        attribute: camelCaseToKebabCase(propertyKey)\n      }, options);\n\n    case Boolean:\n      return Object.assign({\n        reflect: true,\n        attribute: camelCaseToKebabCase(propertyKey),\n        converter: {\n          // Mimic standard HTML boolean attributes + support \"false\" attribute values\n          // https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes\n          toAttribute: function toAttribute(value) {\n            return value ? '' : null;\n          },\n          fromAttribute: function fromAttribute(value) {\n            return value !== 'false' && value !== null;\n          }\n        }\n      }, options);\n\n    case Date:\n      {\n        return Object.assign({\n          // Parse date strings from attributes but do not reflect back into attribute\n          reflect: false,\n          converter: {\n            fromAttribute: function fromAttribute(value) {\n              return new Date(value);\n            }\n          }\n        }, options);\n      }\n\n    default:\n      return options;\n  }\n}\nexport function requirePropertyCheck(protoOrDescriptor, name, options) {\n  var targetFirstUpdated = protoOrDescriptor.firstUpdated;\n\n  function firstUpdated(props) {\n    if (options && options.required && isNilOrEmpty(this[name])) {\n      var message = options.requiredMessage || getRequiredMessage(options.required, name, this.tagName);\n\n      if (options.required === 'error') {\n        throw new Error(message);\n      } else {\n        LogService.warn(message, this);\n      }\n    }\n\n    if (targetFirstUpdated) {\n      targetFirstUpdated.apply(this, [props]);\n    }\n  }\n\n  protoOrDescriptor.firstUpdated = firstUpdated;\n}\n\nfunction getRequiredMessage() {\n  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'warning';\n  var propertyName = arguments.length > 1 ? arguments[1] : undefined;\n  var tagName = arguments.length > 2 ? arguments[2] : undefined;\n  var tag = tagName.toLocaleLowerCase();\n  return \"\".concat(capitalizeFirstLetter(level), \": \").concat(propertyName, \" is required to use \").concat(tag, \" component. Set the JS Property or HTML Attribute.\\n\\n\") + \"\".concat(getAngularVersion() ? \"Angular: <\".concat(tag, \" [\").concat(propertyName, \"]=\\\"...\\\"></\").concat(tag, \">\\n\") : '') + \"\".concat(getVueVersion() ? \"Vue: <\".concat(tag, \" :\").concat(propertyName, \"=\\\"...\\\"></\").concat(tag, \">\\n\") : '') + \"\".concat(getReactVersion() ? \"React: <\".concat(kebabCaseToPascalCase(tag), \" \").concat(propertyName, \"={...} />\\n\") : '') + \"\".concat(\"HTML: <\".concat(tag, \" \").concat(camelCaseToKebabCase(propertyName), \"=\\\"...\\\"></\").concat(tag, \">\\n\")) + \"\".concat(\"JavaScript: document.querySelector('\".concat(tag, \"').\").concat(propertyName, \" = '...';\\n\\n\"));\n}\n/**\n * lit-element @property decorator with custom defaults specific to Clarity.\n * https://lit-element.polymer-project.org/guide/properties#property-options\n *\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A PropertyDeclaration may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\n\n\nexport function property(options) {\n  return function (protoOrDescriptor, name) {\n    requirePropertyCheck(protoOrDescriptor, name, options);\n    return prop(getDefaultOptions(name, options))(protoOrDescriptor, name);\n  };\n}\n/**\n * lit-element @internalProperty decorator with custom defaults specific to Clarity.\n *\n * This is used for communication between internal component properties\n * that are not exposed as part of the public component API.\n *\n * A internalProperty decorator which creates a LitElement property which will\n * trigger a re-render when set but not allow the value to be updated through\n * public attributes.\n *\n * @ExportDecoratedItems\n */\n\nexport function internalProperty(options) {\n  return function (protoOrDescriptor, name) {\n    var defaultOptions = getDefaultOptions(name, options);\n\n    if (defaultOptions) {\n      defaultOptions.reflect = (options === null || options === void 0 ? void 0 : options.reflect) ? options.reflect : false; // prevent attr reflection by default\n\n      if (defaultOptions.reflect && !(options === null || options === void 0 ? void 0 : options.attribute)) {\n        // mark as internal attr if reflect and no provided attr\n        // see description for more detail https://github.com/vmware/clarity/pull/5431\n        defaultOptions.attribute = \"_\".concat(camelCaseToKebabCase(name));\n      }\n    }\n\n    return prop(defaultOptions)(protoOrDescriptor, name);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}