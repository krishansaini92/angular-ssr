{"ast":null,"code":"import _classCallCheck from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { EventSubject } from '@cds/core/internal';\nimport { unknownIcon } from './shapes/unknown.js';\nimport { addIcons as _addIcons, setIconAliases } from './utils/icon.service-helpers.js';\nvar iconUpdates = new EventSubject();\nvar registry = {\n  unknown: unknownIcon[1]\n};\nvar iconRegistry = new Proxy(registry, {\n  set: function set(target, key, value) {\n    iconUpdates.emit(key);\n    target[key] = value;\n    return true;\n  }\n});\n/**\n * ClarityIcons is a static class that gives users the ability to interact with\n * the icon registry. This includes capabilities to add, retrieve, or alias icons\n * in the registry.\n *\n * @privateRemarks\n *\n * The icon registry is private to the module. There is no way to access it directly\n * outside of the module.\n *\n */\n// @dynamic\n\nexport var ClarityIcons = /*@__PURE__*/function () {\n  var ClarityIcons = /*#__PURE__*/function () {\n    function ClarityIcons() {\n      _classCallCheck(this, ClarityIcons);\n    }\n\n    _createClass(ClarityIcons, null, [{\n      key: \"registry\",\n      get:\n      /**\n       * Returns a readonly reference of the icon registry.\n       */\n      function get() {\n        return iconRegistry;\n      }\n    }, {\n      key: \"addIcons\",\n      value: function addIcons() {\n        for (var _len = arguments.length, shapes = new Array(_len), _key = 0; _key < _len; _key++) {\n          shapes[_key] = arguments[_key];\n        }\n\n        _addIcons(shapes, iconRegistry);\n      }\n      /**\n       * @description\n       * Use `addIcons` instead of `addAliases`\n       *\n       * This method is a backwords compatibility function to the old API\n       *\n       * The team will revisit this method for possible deprecation.\n       */\n\n    }, {\n      key: \"addAliases\",\n      value: function addAliases() {\n        for (var _len2 = arguments.length, aliases = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          aliases[_key2] = arguments[_key2];\n        }\n\n        aliases.forEach(function (alias) {\n          return setIconAliases(alias, iconRegistry);\n        });\n      }\n    }, {\n      key: \"getIconNameFromShape\",\n      value: function getIconNameFromShape(iconShape) {\n        return iconShape[0];\n      }\n    }]);\n\n    return ClarityIcons;\n  }();\n  /**\n   * Subscribe to receive updates when icons are added or updated\n   */\n\n\n  ClarityIcons.iconUpdates = iconUpdates.toEventObservable();\n  return ClarityIcons;\n}();","map":null,"metadata":{},"sourceType":"module"}