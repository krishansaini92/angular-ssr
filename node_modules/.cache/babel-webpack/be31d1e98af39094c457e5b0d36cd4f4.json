{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _templateObject, _templateObject2;\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { baseStyles, hasStringPropertyChanged, hasStringPropertyChangedAndNotNil, property, internalProperty, isString, pxToRem } from '@cds/core/internal';\nimport { html, LitElement, query, svg } from 'lit-element';\nimport { styles } from './icon.element.css.js';\nimport { ClarityIcons } from './icon.service.js';\nimport { updateIconSizeStyle } from './utils/icon.classnames.js';\nimport { getIconBadgeSVG, getIconSVG } from './utils/icon.svg-helpers.js';\n/**\n * Icon component that renders svg shapes that can be customized.\n * To load an icon, import the icon with the icon service.\n *\n * ```typescript\n * import '@cds/core/icon/register.js';\n * import { ClarityIcons, userIcon } from '@cds/core/icon';\n *\n * ClarityIcons.addIcons(userIcon);\n * ```\n *\n * ```html\n * <cds-icon shape=\"user\"></cds-icon>\n * ```\n *\n * @element cds-icon\n * @cssprop --color\n * @cssprop --badge-color\n */\n\nexport var CdsIcon = /*@__PURE__*/function () {\n  var CdsIcon = /*#__PURE__*/function (_LitElement) {\n    _inherits(CdsIcon, _LitElement);\n\n    var _super = _createSuper(CdsIcon);\n\n    function CdsIcon() {\n      var _this;\n\n      _classCallCheck(this, CdsIcon);\n\n      _this = _super.apply(this, arguments);\n      _this._shape = 'unknown';\n      /**\n       * Displays most icons in their \"filled\" version if set to `true`.\n       */\n\n      _this.solid = false;\n      /**\n       * Inverts color of icon fills and outlines if `true`.\n       * Useful for displaying icons on a dark background.\n       */\n\n      _this.inverse = false;\n      return _this;\n    }\n\n    _createClass(CdsIcon, [{\n      key: \"shape\",\n      get: function get() {\n        return this._shape;\n      }\n      /**\n       * Changes the svg glyph displayed in the icon component. Defaults to the 'unknown' icon if\n       * the specified icon cannot be found in the icon registry.\n       */\n      ,\n      set: function set(val) {\n        if (hasStringPropertyChangedAndNotNil(val, this._shape)) {\n          var oldVal = this._shape;\n          this._shape = val;\n          this.requestUpdate('shape', oldVal);\n        }\n      }\n    }, {\n      key: \"size\",\n      get: function get() {\n        return this._size;\n      }\n      /**\n       * @type {string | sm | md | lg | xl | xxl}\n       * Apply numerical width-height or a t-shirt-sized CSS classname\n       */\n      ,\n      set: function set(val) {\n        if (hasStringPropertyChanged(val, this._size)) {\n          var oldVal = this._size;\n          this._size = val;\n          updateIconSizeStyle(this, val);\n          this.requestUpdate('size', oldVal);\n        }\n      }\n    }, {\n      key: \"updated\",\n      value: function updated(props) {\n        if (props.has('innerOffset') && this.innerOffset > 0) {\n          var val = pxToRem(this.innerOffset);\n          var dimension = \"calc(100% + \".concat(Number(val.replace('rem', '')) * 2, \"rem)\");\n          this.svg.style.width = dimension;\n          this.svg.style.height = dimension;\n          this.svg.style.margin = \"-\".concat(val, \" 0 0 -\").concat(val);\n        }\n      }\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this2 = this;\n\n        _get(_getPrototypeOf(CdsIcon.prototype), \"connectedCallback\", this).call(this);\n\n        this.subscription = ClarityIcons.iconUpdates.subscribe(function (shape) {\n          if (shape === _this2.shape) {\n            _this2.requestUpdate();\n          }\n        });\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(CdsIcon.prototype), \"disconnectedCallback\", this).call(this);\n\n        this.subscription.unsubscribe();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return isString(ClarityIcons.registry[this.shape]) ? html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"<span .innerHTML=\\\"\", \"\\\"></span>\"])), ClarityIcons.registry[this.shape]) : svg(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"<svg .innerHTML=\\\"\", \"\\\" viewBox=\\\"0 0 36 36\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" aria-hidden=\\\"true\\\"></svg>\"])), getIconSVG(this) + getIconBadgeSVG(this));\n      }\n    }], [{\n      key: \"styles\",\n      get: function get() {\n        return [baseStyles, styles];\n      }\n    }]);\n\n    return CdsIcon;\n  }(LitElement);\n\n  __decorate([property({\n    type: String\n  })], CdsIcon.prototype, \"shape\", null);\n\n  __decorate([property({\n    type: String\n  })], CdsIcon.prototype, \"size\", null);\n\n  __decorate([property({\n    type: String\n  })], CdsIcon.prototype, \"direction\", void 0);\n\n  __decorate([property({\n    type: String\n  })], CdsIcon.prototype, \"flip\", void 0);\n\n  __decorate([property({\n    type: Boolean\n  })], CdsIcon.prototype, \"solid\", void 0);\n\n  __decorate([property({\n    type: String\n  })], CdsIcon.prototype, \"status\", void 0);\n\n  __decorate([property({\n    type: Boolean\n  })], CdsIcon.prototype, \"inverse\", void 0);\n\n  __decorate([property({\n    type: String\n  })], CdsIcon.prototype, \"badge\", void 0);\n\n  __decorate([internalProperty({\n    type: Number\n  })], CdsIcon.prototype, \"innerOffset\", void 0);\n\n  __decorate([query('svg')], CdsIcon.prototype, \"svg\", void 0);\n\n  return CdsIcon;\n}();","map":null,"metadata":{},"sourceType":"module"}