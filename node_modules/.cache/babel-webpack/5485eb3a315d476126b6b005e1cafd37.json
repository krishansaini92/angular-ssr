{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { KeyCodeService } from '../services/keycodes.service.js';\n/**\n * keyWasEvented() checks to see if a given key is part of any KeyboardEvent it is passed.\n */\n\nexport function keyWasEvented(evt, whichKey) {\n  // evt.key support goes all the way back to IE9; we don't need evt.keyCode for IE support!\n  return KeyCodeService.getCode(whichKey) === evt.key;\n}\n/**\n * checkModifierKey() tests if a special key (Ctrl, Alt, Meta, Shift) part of a KeyboardEvent.\n */\n\nfunction checkModifierKey(evt, key) {\n  switch (key) {\n    case 'ctrl':\n      return evt.ctrlKey;\n\n    case 'alt':\n      return evt.altKey;\n\n    case 'shift':\n      return evt.shiftKey;\n\n    case 'cmd':\n    case 'win':\n    case 'meta':\n      return evt.metaKey;\n\n    default:\n      return false;\n  }\n} // handlers -> single keys or any of a collection of keys\n\n/**\n * onKey() takes a single key and fires a handler if that key is part of\n * the KeyboardEvent it was passed.\n */\n\n\nexport function onKey(whichKey, evt, handler) {\n  if (keyWasEvented(evt, whichKey)) {\n    handler();\n  }\n}\n/**\n * onAnyKey() takes an array of keys and fires a handler if any of the keys are part of\n * the KeyboardEvent it was passed.\n */\n\nexport function onAnyKey(whichKeys, evt, handler) {\n  var eventedKeys = whichKeys.filter(function (k) {\n    return keyWasEvented(evt, k);\n  });\n\n  if (eventedKeys.length > 0) {\n    handler();\n  }\n} // key combos\n\n/**\n * onKeyCombo() takes a string representation of a combination of keys and modifier keys such as\n * 'ctrl+shift+a'.\n *\n * onKeyCombo() does not make accommodation for the '+' symbol in a key combo. Consider using 'ctrl+shift+='.\n *\n * onKeyCombo() accounts for 'cmd', 'win', and 'meta' keys inside keycombos. 'cmd+K', 'win+K', and 'meta+K'\n * are all the same thing to onKeyCombo().\n */\n\nexport function onKeyCombo(whichKeyCombo, evt, handler) {\n  if (wereModifierComboKeysPressed(whichKeyCombo, evt) && wereNonModifierComboKeysPressed(whichKeyCombo, evt)) {\n    handler();\n  }\n} // key combo helpers\n\nvar modifierKeys = ['ctrl', 'alt', 'shift', 'meta', 'cmd', 'win'];\n/**\n * getModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * special keys in the keycombo.\n */\n\nexport function getModifierKeysFromKeyCombo(keyCombo) {\n  // note: at some point, we may have to handle a situation of 'ctrl++' or 'ctrl+plus'\n  // it's unlikely so i'm not over-coding for it right now\n  return keyCombo.split('+').filter(function (k) {\n    return modifierKeys.indexOf(k) > -1;\n  });\n}\n/**\n * removeModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * non-special keys in the keycombo.\n */\n\nexport function removeModifierKeysFromKeyCombo(keyCombo) {\n  return keyCombo.split('+').filter(function (k) {\n    return modifierKeys.indexOf(k) < 0;\n  });\n}\n/**\n * wereModifierComboKeysPressed() tests if ALL special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent keycombo.\n *\n * @private\n *\n */\n\nfunction wereModifierComboKeysPressed(keyCombo, evt) {\n  var modifierKeyArray = getModifierKeysFromKeyCombo(keyCombo);\n\n  if (modifierKeyArray.length === 0) {\n    return true;\n  }\n\n  return modifierKeyArray.reduce(function (acc, currentKey) {\n    return acc && checkModifierKey(evt, currentKey);\n  }, true);\n}\n/**\n * wereNonModifierComboKeysPressed() tests if non-special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent.\n *\n * @private\n *\n */\n\n\nfunction wereNonModifierComboKeysPressed(keyCombo, evt) {\n  var keyArray = removeModifierKeysFromKeyCombo(keyCombo);\n\n  if (keyArray.length === 0) {\n    return true;\n  }\n\n  return keyArray.reduce(function (acc, currentKey) {\n    return acc && keyWasEvented(evt, currentKey);\n  }, true);\n}","map":null,"metadata":{},"sourceType":"module"}