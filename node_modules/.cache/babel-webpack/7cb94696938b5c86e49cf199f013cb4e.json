{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _classCallCheck from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/krishan/Documents/vmware/angular-ssr/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar _templateObject, _templateObject2;\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { property, internalProperty } from '../decorators/property.js';\nimport { querySlot } from '../decorators/query-slot.js';\nimport { onAnyKey } from '../utils/keycodes.js';\nimport { stopEvent } from './../utils/events.js'; // @dynamic\n\nexport var CdsBaseButton = /*@__PURE__*/function () {\n  var CdsBaseButton = /*#__PURE__*/function (_LitElement) {\n    _inherits(CdsBaseButton, _LitElement);\n\n    var _super = _createSuper(CdsBaseButton);\n\n    function CdsBaseButton() {\n      var _this;\n\n      _classCallCheck(this, CdsBaseButton);\n\n      _this = _super.apply(this, arguments);\n      _this.readonly = false;\n      _this.disabled = false;\n      _this.ariaDisabled = 'false';\n      _this.focused = false;\n      _this.active = false;\n      _this.role = 'button';\n      _this.isAnchor = false;\n      return _this;\n    }\n\n    _createClass(CdsBaseButton, [{\n      key: \"render\",\n      value: function render() {\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\" <slot></slot> \"])));\n      }\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(CdsBaseButton.prototype), \"connectedCallback\", this).call(this);\n\n        this.tabIndex = 0; // initialize immediately so button can be focused synchronously\n      }\n    }, {\n      key: \"firstUpdated\",\n      value: function firstUpdated(props) {\n        _get(_getPrototypeOf(CdsBaseButton.prototype), \"firstUpdated\", this).call(this, props);\n\n        this.setupNativeButtonBehavior();\n      }\n    }, {\n      key: \"updated\",\n      value: function updated(props) {\n        _get(_getPrototypeOf(CdsBaseButton.prototype), \"updated\", this).call(this, props);\n\n        this.updateButtonAttributes();\n      }\n      /** This mimics the mouse-click visual behavior for keyboard only users and screen readers.\n       * Browsers do not apply the CSS psuedo-selector :active in those instances. So we need this\n       * for our :active styles to show.\n       *\n       * Make sure to update a component's CSS to account for the presence of the [_active] attribute\n       * in all instance where :active is defined.\n       *\n       * @private\n       */\n\n    }, {\n      key: \"showClick\",\n      value: function showClick() {\n        var _this2 = this;\n\n        this.active = true;\n        var clickTimer = setTimeout(function () {\n          _this2.active = false;\n          clearTimeout(clickTimer);\n        }, 300);\n      }\n      /**\n       * We have to append a hidden button outside the web component in the light DOM\n       * This allows us to trigger native submit events within a form element.\n       */\n\n    }, {\n      key: \"setupNativeButtonBehavior\",\n      value: function setupNativeButtonBehavior() {\n        this.addEventListener('click', this.triggerNativeButtonBehavior);\n        this.addEventListener('keydown', this.emulateKeyBoardEventBehavior);\n      }\n    }, {\n      key: \"triggerNativeButtonBehavior\",\n      value: function triggerNativeButtonBehavior(event) {\n        if (!this.readonly) {\n          if (this.disabled) {\n            stopEvent(event);\n          } else if (!event.defaultPrevented) {\n            var buttonTemplate = html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"<button\\n          class=\\\"cds-hidden-button\\\"\\n          aria-hidden=\\\"true\\\"\\n          ?disabled=\\\"\", \"\\\"\\n          tabindex=\\\"-1\\\"\\n          style=\\\"display: none !important\\\"\\n          value=\\\"\", \"\\\"\\n          name=\\\"\", \"\\\"\\n          type=\\\"\", \"\\\"\\n        ></button>\"])), this.disabled, ifDefined(this.value), ifDefined(this.name), ifDefined(this.type));\n            this.showClick();\n            this.appendChild(buttonTemplate.getTemplateElement().content.cloneNode(true));\n            var button = this.querySelector('.cds-hidden-button');\n            button.dispatchEvent(new MouseEvent('click', {\n              relatedTarget: this,\n              composed: true\n            }));\n            button.remove();\n          }\n        }\n      }\n    }, {\n      key: \"emulateKeyBoardEventBehavior\",\n      value: function emulateKeyBoardEventBehavior(evt) {\n        var _this3 = this;\n\n        onAnyKey(['enter', 'space'], evt, function () {\n          _this3.click();\n\n          stopEvent(evt);\n        });\n      }\n    }, {\n      key: \"updateButtonAttributes\",\n      value: function updateButtonAttributes() {\n        var _a;\n\n        this.isAnchor = ((_a = this.parentElement) === null || _a === void 0 ? void 0 : _a.tagName) === 'A';\n\n        if (this.isAnchor && this.parentElement) {\n          this.parentElement.style.lineHeight = '0';\n          this.parentElement.style.textDecoration = 'none'; // fixes issue when style is applied to text node\n        }\n\n        this.readonly = this.readonly || this.isAnchor;\n        this.role = this.readonly ? null : 'button';\n\n        if (this.readonly) {\n          this.tabIndexAttr = null;\n          this.ariaDisabled = null;\n        } else {\n          this.tabIndexAttr = this.disabled ? -1 : 0;\n          this.ariaDisabled = this.disabled ? 'true' : 'false';\n        }\n      }\n    }]);\n\n    return CdsBaseButton;\n  }(LitElement);\n\n  __decorate([property({\n    type: Boolean\n  })], CdsBaseButton.prototype, \"readonly\", void 0);\n\n  __decorate([property({\n    type: String\n  })], CdsBaseButton.prototype, \"type\", void 0);\n\n  __decorate([property({\n    type: String\n  })], CdsBaseButton.prototype, \"name\", void 0);\n\n  __decorate([property({\n    type: String\n  })], CdsBaseButton.prototype, \"value\", void 0);\n\n  __decorate([property({\n    type: Boolean\n  })], CdsBaseButton.prototype, \"disabled\", void 0);\n\n  __decorate([internalProperty({\n    type: String,\n    attribute: 'aria-disabled',\n    reflect: true\n  })], CdsBaseButton.prototype, \"ariaDisabled\", void 0);\n\n  __decorate([internalProperty({\n    type: Number,\n    attribute: 'tabindex',\n    reflect: true\n  })], CdsBaseButton.prototype, \"tabIndexAttr\", void 0);\n\n  __decorate([internalProperty({\n    type: Boolean,\n    reflect: true\n  })], CdsBaseButton.prototype, \"focused\", void 0);\n\n  __decorate([internalProperty({\n    type: Boolean,\n    reflect: true\n  })], CdsBaseButton.prototype, \"active\", void 0);\n\n  __decorate([internalProperty({\n    type: String,\n    reflect: true,\n    attribute: 'role'\n  })], CdsBaseButton.prototype, \"role\", void 0);\n\n  __decorate([internalProperty({\n    type: Boolean,\n    reflect: true\n  })], CdsBaseButton.prototype, \"isAnchor\", void 0);\n\n  __decorate([querySlot('cds-icon')], CdsBaseButton.prototype, \"icon\", void 0);\n\n  __decorate([querySlot('cds-badge')], CdsBaseButton.prototype, \"badge\", void 0);\n\n  return CdsBaseButton;\n}();","map":null,"metadata":{},"sourceType":"module"}