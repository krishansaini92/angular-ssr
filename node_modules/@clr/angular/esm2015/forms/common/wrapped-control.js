/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { HostBinding, HostListener, Injector, Input, Type, ViewContainerRef, Renderer2, ElementRef, Directive, } from '@angular/core';
import { filter, distinctUntilChanged, startWith } from 'rxjs/operators';
import { HostWrapper } from '../../utils/host-wrapping/host-wrapper';
import { ControlIdService } from './providers/control-id.service';
import { NgControlService } from './providers/ng-control.service';
import { NgControl } from '@angular/forms';
import { ControlClassService } from './providers/control-class.service';
import { MarkControlService } from './providers/mark-control.service';
import { IfControlStateService, CONTROL_STATE } from './if-control-state/if-control-state.service';
export class WrappedFormControl {
    // I lost way too much time trying to make this work without injecting the ViewContainerRef and the Injector,
    // I'm giving up. So we have to inject these two manually for now.
    constructor(vcr, wrapperType, injector, ngControl, renderer, el) {
        this.vcr = vcr;
        this.wrapperType = wrapperType;
        this.ngControl = ngControl;
        this.subscriptions = [];
        this.index = 0;
        this.renderer = renderer;
        this.el = el;
        try {
            this.ngControlService = injector.get(NgControlService);
            this.ifControlStateService = injector.get(IfControlStateService);
            this.controlClassService = injector.get(ControlClassService);
            this.markControlService = injector.get(MarkControlService);
        }
        catch (e) {
            // Swallow errors
        }
        if (this.controlClassService) {
            this.controlClassService.initControlClass(renderer, el.nativeElement);
        }
        if (this.markControlService) {
            this.subscriptions.push(this.markControlService.touchedChange.subscribe(() => {
                this.markAsTouched();
            }));
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
        if (this.controlIdService) {
            this.controlIdService.id = value;
        }
    }
    triggerValidation() {
        if (this.ifControlStateService) {
            /**
             * For some reason the <input type="number" /> on blur ngControl doesn't set the control to 'touched'
             * This one is a workaround to provide the control to be 'touched' on blur and fix #4480.
             */
            if (this.ngControl && !this.ngControl.touched) {
                this.markAsTouched();
            }
            this.ifControlStateService.triggerStatusChange();
        }
    }
    markAsTouched() {
        this.ngControl.control.markAsTouched();
        this.ngControl.control.updateValueAndValidity();
    }
    // @TODO This method has a try/catch due to an unknown issue that came when building the clrToggle feature
    // We need to figure out why this fails for the ClrToggle scenario but works for Date picker...
    // To see the error, remove the try/catch here and run the ClrToggle suite to see issues getting the container
    // injector in time, and this ONLY HAPPENS in tests and not in dev/prod mode.
    getProviderFromContainer(token, notFoundValue) {
        try {
            return this._containerInjector.get(token, notFoundValue);
        }
        catch (e) {
            return notFoundValue;
        }
    }
    ngOnInit() {
        this._containerInjector = new HostWrapper(this.wrapperType, this.vcr, this.index);
        this.controlIdService = this._containerInjector.get(ControlIdService);
        if (this._id) {
            this.controlIdService.id = this._id;
        }
        else {
            this._id = this.controlIdService.id;
        }
        if (this.ngControlService) {
            this.ngControlService.setControl(this.ngControl);
        }
    }
    ngAfterViewInit() {
        this.listenForErrorStateChanges();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    listenForErrorStateChanges() {
        if (this.ifControlStateService) {
            this.subscriptions.push(this.ifControlStateService.statusChanges
                .pipe(startWith(CONTROL_STATE.NONE), filter(() => this.renderer && !!this.el), distinctUntilChanged())
                .subscribe(state => this.setAriaDescribedBy(state)));
        }
    }
    setAriaDescribedBy(state) {
        this.renderer.setAttribute(this.el.nativeElement, 'aria-describedby', this.getAriaDescribedById(state));
    }
    getAriaDescribedById(state) {
        if (!this.controlIdService) {
            return '';
        }
        let suffix;
        switch (state) {
            case CONTROL_STATE.INVALID:
                suffix = '-error';
                break;
            case CONTROL_STATE.VALID:
                suffix = '-success';
                break;
            default:
                suffix = '-helper';
        }
        return this.controlIdService.id.concat(suffix);
    }
}
WrappedFormControl.decorators = [
    { type: Directive }
];
WrappedFormControl.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Type },
    { type: Injector },
    { type: NgControl },
    { type: Renderer2 },
    { type: ElementRef }
];
WrappedFormControl.propDecorators = {
    id: [{ type: HostBinding }, { type: Input }],
    triggerValidation: [{ type: HostListener, args: ['blur',] }]
};
//# sourceMappingURL=data:application/json;base64,