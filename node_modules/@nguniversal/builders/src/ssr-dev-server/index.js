/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/ssr-dev-server/index", ["require", "exports", "@angular-devkit/architect", "@angular-devkit/core", "browser-sync", "http-proxy-middleware", "path", "rxjs", "rxjs/operators", "url", "@nguniversal/builders/src/ssr-dev-server/utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.execute = void 0;
    const architect_1 = require("@angular-devkit/architect");
    const core_1 = require("@angular-devkit/core");
    const browserSync = require("browser-sync");
    const http_proxy_middleware_1 = require("http-proxy-middleware");
    const path_1 = require("path");
    const rxjs_1 = require("rxjs");
    const operators_1 = require("rxjs/operators");
    const url = require("url");
    const utils_1 = require("@nguniversal/builders/src/ssr-dev-server/utils");
    /** Log messages to ignore and not rely to the logger */
    const IGNORED_STDOUT_MESSAGES = [
        'server listening on',
        'Angular is running in the development mode. Call enableProdMode() to enable the production mode.'
    ];
    function execute(options, context) {
        const browserTarget = architect_1.targetFromTargetString(options.browserTarget);
        const serverTarget = architect_1.targetFromTargetString(options.serverTarget);
        const getBaseUrl = (bs) => `${bs.getOption('scheme')}://${bs.getOption('host')}:${bs.getOption('port')}`;
        const browserTargetRun = context.scheduleTarget(browserTarget, {
            serviceWorker: false,
            watch: true,
            progress: options.progress,
        });
        const serverTargetRun = context.scheduleTarget(serverTarget, {
            watch: true,
            progress: options.progress,
        });
        const bsInstance = browserSync.create();
        context.logger.error(core_1.tags.stripIndents `
  ****************************************************************************************
  This is a simple server for use in testing or debugging Angular applications locally.
  It hasn't been reviewed for security issues.

  DON'T USE IT FOR PRODUCTION!
  ****************************************************************************************
 `);
        return rxjs_1.zip(browserTargetRun, serverTargetRun, utils_1.getAvailablePort()).pipe(operators_1.switchMap(([br, sr, nodeServerPort]) => {
            return rxjs_1.combineLatest([br.output, sr.output]).pipe(
            // This is needed so that if both server and browser emit close to each other
            // we only emit once. This typically happens on the first build.
            operators_1.debounceTime(120), operators_1.switchMap(([b, s]) => {
                if (!s.success || !b.success) {
                    return rxjs_1.of([b, s]);
                }
                return startNodeServer(s, nodeServerPort, context.logger, !!options.inspect).pipe(operators_1.mapTo([b, s]), operators_1.catchError(err => {
                    context.logger.error(`A server error has occurred.\n${mapErrorToMessage(err)}`);
                    return rxjs_1.EMPTY;
                }));
            }), operators_1.map(([b, s]) => [
                {
                    success: b.success && s.success,
                    error: b.error || s.error,
                },
                nodeServerPort,
            ]), operators_1.tap(([builderOutput]) => {
                if (builderOutput.success) {
                    context.logger.info('\nCompiled successfully.');
                }
            }), operators_1.debounce(([builderOutput]) => builderOutput.success && !options.inspect
                ? utils_1.waitUntilServerIsListening(nodeServerPort)
                : rxjs_1.EMPTY));
        }), operators_1.concatMap(([builderOutput, nodeServerPort]) => {
            if (!builderOutput.success) {
                return rxjs_1.of(builderOutput);
            }
            if (bsInstance.active) {
                bsInstance.reload();
                return rxjs_1.of(builderOutput);
            }
            else {
                return rxjs_1.from(initBrowserSync(bsInstance, nodeServerPort, options))
                    .pipe(operators_1.tap(bs => {
                    const baseUrl = getBaseUrl(bs);
                    context.logger.info(core_1.tags.oneLine `
                **
                Angular Universal Live Development Server is listening on ${baseUrl},
                open your browser on ${baseUrl}
                **
              `);
                }), operators_1.mapTo(builderOutput));
            }
        }), operators_1.map(builderOutput => ({
            success: builderOutput.success,
            error: builderOutput.error,
            baseUrl: bsInstance && getBaseUrl(bsInstance),
        })), operators_1.finalize(() => {
            if (bsInstance) {
                bsInstance.exit();
                bsInstance.cleanup();
            }
        }), operators_1.catchError(error => rxjs_1.of({
            success: false,
            error: mapErrorToMessage(error),
        })));
    }
    exports.execute = execute;
    function startNodeServer(serverOutput, port, logger, inspectMode = false) {
        const outputPath = serverOutput.outputPath;
        const path = path_1.join(outputPath, 'main.js');
        const env = Object.assign(Object.assign({}, process.env), { PORT: '' + port });
        const args = [`"${path}"`];
        if (inspectMode) {
            args.unshift('--inspect-brk');
        }
        return rxjs_1.of(null)
            .pipe(operators_1.delay(0), // Avoid EADDRINUSE error since it will cause the kill event to be finish.
        operators_1.switchMap(() => utils_1.spawnAsObservable('node', args, { env, shell: true })), operators_1.tap(({ stderr, stdout }) => {
            if (stderr) {
                logger.error(stderr);
            }
            if (stdout && !IGNORED_STDOUT_MESSAGES.some(x => stdout.includes(x))) {
                logger.info(stdout);
            }
        }), operators_1.ignoreElements(), 
        // Emit a signal after the process has been started
        operators_1.startWith(undefined));
    }
    function initBrowserSync(browserSyncInstance, nodeServerPort, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (browserSyncInstance.active) {
                return browserSyncInstance;
            }
            const { port: browserSyncPort, open, host, publicHost } = options;
            const bsPort = browserSyncPort || (yield utils_1.getAvailablePort());
            const bsOptions = {
                proxy: {
                    target: `localhost:${nodeServerPort}`,
                    proxyOptions: {
                        xfwd: true
                    },
                    proxyRes: [
                        proxyRes => {
                            if ('headers' in proxyRes) {
                                proxyRes.headers['cache-control'] = undefined;
                            }
                        },
                    ]
                    // proxyOptions is not in the typings
                },
                host,
                port: bsPort,
                ui: false,
                server: false,
                notify: false,
                ghostMode: false,
                logLevel: 'silent',
                open,
            };
            const publicHostNormalized = publicHost && publicHost.endsWith('/')
                ? publicHost.substring(0, publicHost.length - 1)
                : publicHost;
            if (publicHostNormalized) {
                const { protocol, hostname, port, pathname } = url.parse(publicHostNormalized);
                const defaultSocketIoPath = '/browser-sync/socket.io';
                const defaultNamespace = '/browser-sync';
                const hasPathname = !!(pathname && pathname !== '/');
                const namespace = hasPathname ? pathname + defaultNamespace : defaultNamespace;
                const path = hasPathname ? pathname + defaultSocketIoPath : defaultSocketIoPath;
                bsOptions.socket = {
                    namespace,
                    path,
                    domain: url.format({
                        protocol,
                        hostname,
                        port,
                    }),
                };
                // When having a pathname we also need to create a reverse proxy because socket.io
                // will be listening on: 'http://localhost:4200/ssr/browser-sync/socket.io'
                // However users will typically have a reverse proxy that will redirect all matching requests
                // ex: http://testinghost.com/ssr -> http://localhost:4200 which will result in a 404.
                if (hasPathname) {
                    // Remove leading slash
                    bsOptions.scriptPath = p => p.substring(1),
                        bsOptions.middleware = [
                            http_proxy_middleware_1.createProxyMiddleware(defaultSocketIoPath, {
                                target: url.format({
                                    protocol: 'http',
                                    hostname: host,
                                    port: bsPort,
                                    pathname: path,
                                }),
                                ws: true,
                                logLevel: 'silent',
                            }),
                        ];
                }
            }
            return new Promise((resolve, reject) => {
                browserSyncInstance.init(bsOptions, (error, bs) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(bs);
                    }
                });
            });
        });
    }
    function mapErrorToMessage(error) {
        if (error instanceof Error) {
            return error.message;
        }
        if (typeof error === 'string') {
            return error;
        }
        return '';
    }
    exports.default = architect_1.createBuilder(execute);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9zc3ItZGV2LXNlcnZlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFSCx5REFLbUM7SUFDbkMsK0NBQTJEO0lBQzNELDRDQUE0QztJQUM1QyxpRUFBOEQ7SUFDOUQsK0JBQTRCO0lBQzVCLCtCQU9jO0lBQ2QsOENBYXdCO0lBQ3hCLDJCQUEyQjtJQUczQiwwRUFBMEY7SUFFMUYsd0RBQXdEO0lBQ3hELE1BQU0sdUJBQXVCLEdBQUc7UUFDOUIscUJBQXFCO1FBQ3JCLGtHQUFrRztLQUNuRyxDQUFDO0lBUUYsU0FBZ0IsT0FBTyxDQUNyQixPQUFtQyxFQUNuQyxPQUF1QjtRQUV2QixNQUFNLGFBQWEsR0FBRyxrQ0FBc0IsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDcEUsTUFBTSxZQUFZLEdBQUcsa0NBQXNCLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xFLE1BQU0sVUFBVSxHQUFHLENBQUMsRUFBbUMsRUFBRSxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBRTFJLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUU7WUFDN0QsYUFBYSxFQUFFLEtBQUs7WUFDcEIsS0FBSyxFQUFFLElBQUk7WUFDWCxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7U0FDM0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUU7WUFDM0QsS0FBSyxFQUFFLElBQUk7WUFDWCxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7U0FDM0IsQ0FBQyxDQUFDO1FBRUgsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRXhDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQUksQ0FBQyxZQUFZLENBQUE7Ozs7Ozs7RUFPdEMsQ0FBQyxDQUFDO1FBRUYsT0FBTyxVQUFHLENBQ1IsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZix3QkFBZ0IsRUFBRSxDQUNuQixDQUFDLElBQUksQ0FDSixxQkFBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUU7WUFDckMsT0FBTyxvQkFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJO1lBQy9DLDZFQUE2RTtZQUM3RSxnRUFBZ0U7WUFDaEUsd0JBQVksQ0FBQyxHQUFHLENBQUMsRUFDakIscUJBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25CLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRTtvQkFDNUIsT0FBTyxTQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDbkI7Z0JBRUQsT0FBTyxlQUFlLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUMvRSxpQkFBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQ2Isc0JBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDZixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUVoRixPQUFPLFlBQUssQ0FBQztnQkFDZixDQUFDLENBQUMsQ0FDSCxDQUFDO1lBQ0osQ0FBQyxDQUFDLEVBQ0YsZUFBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFFO2dCQUNmO29CQUNFLE9BQU8sRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxPQUFPO29CQUMvQixLQUFLLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsS0FBSztpQkFDMUI7Z0JBQ0QsY0FBYzthQUN5QixDQUFDLEVBQzFDLGVBQUcsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxhQUFhLENBQUMsT0FBTyxFQUFFO29CQUN6QixPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO2lCQUNqRDtZQUNILENBQUMsQ0FBQyxFQUNGLG9CQUFRLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87Z0JBQ3JFLENBQUMsQ0FBQyxrQ0FBMEIsQ0FBQyxjQUFjLENBQUM7Z0JBQzVDLENBQUMsQ0FBQyxZQUFLLENBQUMsQ0FDWCxDQUFDO1FBQ0osQ0FBQyxDQUFDLEVBQ0YscUJBQVMsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUU7Z0JBQzFCLE9BQU8sU0FBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQzFCO1lBRUQsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUNyQixVQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7Z0JBRXBCLE9BQU8sU0FBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQzFCO2lCQUFNO2dCQUNMLE9BQU8sV0FBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO3FCQUM5RCxJQUFJLENBQ0gsZUFBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO29CQUNQLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDL0IsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBSSxDQUFDLE9BQU8sQ0FBQTs7NEVBRThCLE9BQU87dUNBQzVDLE9BQU87O2VBRS9CLENBQUMsQ0FBQztnQkFDTCxDQUFDLENBQUMsRUFDRixpQkFBSyxDQUFDLGFBQWEsQ0FBQyxDQUNyQixDQUFDO2FBQ0w7UUFDSCxDQUFDLENBQUMsRUFDRixlQUFHLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BCLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTztZQUM5QixLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUs7WUFDMUIsT0FBTyxFQUFFLFVBQVUsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDO1NBQ2hCLENBQUEsQ0FBQyxFQUNoQyxvQkFBUSxDQUFDLEdBQUcsRUFBRTtZQUNaLElBQUksVUFBVSxFQUFFO2dCQUNkLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEIsVUFBVSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ3RCO1FBQ0gsQ0FBQyxDQUFDLEVBQ0Ysc0JBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFNBQUUsQ0FBQztZQUNyQixPQUFPLEVBQUUsS0FBSztZQUNkLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxLQUFLLENBQUM7U0FDaEMsQ0FBQyxDQUFDLENBQ0osQ0FBQztJQUNKLENBQUM7SUFoSEQsMEJBZ0hDO0lBRUQsU0FBUyxlQUFlLENBQ3RCLFlBQTJCLEVBQzNCLElBQVksRUFDWixNQUF5QixFQUN6QixXQUFXLEdBQUcsS0FBSztRQUVuQixNQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsVUFBb0IsQ0FBQztRQUNyRCxNQUFNLElBQUksR0FBRyxXQUFJLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sR0FBRyxtQ0FBUSxPQUFPLENBQUMsR0FBRyxLQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsSUFBSSxHQUFFLENBQUM7UUFFaEQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7UUFDM0IsSUFBSSxXQUFXLEVBQUU7WUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQy9CO1FBRUQsT0FBTyxTQUFFLENBQUMsSUFBSSxDQUFDO2FBQ1osSUFBSSxDQUNILGlCQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsMEVBQTBFO1FBQ3BGLHFCQUFTLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQWlCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUN0RSxlQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO1lBQ3pCLElBQUksTUFBTSxFQUFFO2dCQUNWLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDdEI7WUFFRCxJQUFJLE1BQU0sSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDcEUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUNyQjtRQUNILENBQUMsQ0FBQyxFQUNGLDBCQUFjLEVBQUU7UUFDaEIsbURBQW1EO1FBQ25ELHFCQUFTLENBQUMsU0FBUyxDQUFDLENBQ3JCLENBQUM7SUFDTixDQUFDO0lBRUQsU0FBZSxlQUFlLENBQzVCLG1CQUFvRCxFQUNwRCxjQUFzQixFQUN0QixPQUFtQzs7WUFFbkMsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEVBQUU7Z0JBQzlCLE9BQU8sbUJBQW1CLENBQUM7YUFDNUI7WUFFRCxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQztZQUNsRSxNQUFNLE1BQU0sR0FBRyxlQUFlLEtBQUksTUFBTSx3QkFBZ0IsRUFBRSxDQUFBLENBQUM7WUFDM0QsTUFBTSxTQUFTLEdBQXdCO2dCQUNyQyxLQUFLLEVBQUU7b0JBQ0wsTUFBTSxFQUFFLGFBQWEsY0FBYyxFQUFFO29CQUNyQyxZQUFZLEVBQUU7d0JBQ1osSUFBSSxFQUFFLElBQUk7cUJBQ1g7b0JBQ0QsUUFBUSxFQUFFO3dCQUNSLFFBQVEsQ0FBQyxFQUFFOzRCQUNULElBQUksU0FBUyxJQUFJLFFBQVEsRUFBRTtnQ0FDekIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxTQUFTLENBQUM7NkJBQy9DO3dCQUNILENBQUM7cUJBQ0Y7b0JBQ0QscUNBQXFDO2lCQUM0QjtnQkFDbkUsSUFBSTtnQkFDSixJQUFJLEVBQUUsTUFBTTtnQkFDWixFQUFFLEVBQUUsS0FBSztnQkFDVCxNQUFNLEVBQUUsS0FBSztnQkFDYixNQUFNLEVBQUUsS0FBSztnQkFDYixTQUFTLEVBQUUsS0FBSztnQkFDaEIsUUFBUSxFQUFFLFFBQVE7Z0JBQ2xCLElBQUk7YUFDTCxDQUFDO1lBRUYsTUFBTSxvQkFBb0IsR0FBRyxVQUFVLElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUM7Z0JBQ2pFLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDaEQsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUVmLElBQUksb0JBQW9CLEVBQUU7Z0JBQ3hCLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQy9FLE1BQU0sbUJBQW1CLEdBQUcseUJBQXlCLENBQUM7Z0JBQ3RELE1BQU0sZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO2dCQUN6QyxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNyRCxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUM7Z0JBQy9FLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQztnQkFFaEYsU0FBUyxDQUFDLE1BQU0sR0FBRztvQkFDakIsU0FBUztvQkFDVCxJQUFJO29CQUNKLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDO3dCQUNqQixRQUFRO3dCQUNSLFFBQVE7d0JBQ1IsSUFBSTtxQkFDTCxDQUFDO2lCQUNILENBQUM7Z0JBRUYsa0ZBQWtGO2dCQUNsRiwyRUFBMkU7Z0JBQzNFLDZGQUE2RjtnQkFDN0Ysc0ZBQXNGO2dCQUN0RixJQUFJLFdBQVcsRUFBRTtvQkFDZix1QkFBdUI7b0JBQ3ZCLFNBQVMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzt3QkFDeEMsU0FBUyxDQUFDLFVBQVUsR0FBRzs0QkFDckIsNkNBQXFCLENBQUMsbUJBQW1CLEVBQUU7Z0NBQ3pDLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDO29DQUNqQixRQUFRLEVBQUUsTUFBTTtvQ0FDaEIsUUFBUSxFQUFFLElBQUk7b0NBQ2QsSUFBSSxFQUFFLE1BQU07b0NBQ1osUUFBUSxFQUFFLElBQUk7aUNBQ2YsQ0FBQztnQ0FDRixFQUFFLEVBQUUsSUFBSTtnQ0FDUixRQUFRLEVBQUUsUUFBUTs2QkFDbkIsQ0FBUTt5QkFDVixDQUFDO2lCQUNMO2FBQ0Y7WUFFRCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO2dCQUNyQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxFQUFFO29CQUNoRCxJQUFJLEtBQUssRUFBRTt3QkFDVCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2Y7eUJBQU07d0JBQ0wsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3FCQUNiO2dCQUNILENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDO0tBQUE7SUFFRCxTQUFTLGlCQUFpQixDQUFDLEtBQWM7UUFDdkMsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFO1lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQztTQUN0QjtRQUVELElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFRCxrQkFBZSx5QkFBYSxDQUE0QyxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQge1xuICBCdWlsZGVyQ29udGV4dCxcbiAgQnVpbGRlck91dHB1dCxcbiAgY3JlYXRlQnVpbGRlcixcbiAgdGFyZ2V0RnJvbVRhcmdldFN0cmluZyxcbn0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2FyY2hpdGVjdCc7XG5pbXBvcnQgeyBqc29uLCBsb2dnaW5nLCB0YWdzIH0gZnJvbSAnQGFuZ3VsYXItZGV2a2l0L2NvcmUnO1xuaW1wb3J0ICogYXMgYnJvd3NlclN5bmMgZnJvbSAnYnJvd3Nlci1zeW5jJztcbmltcG9ydCB7IGNyZWF0ZVByb3h5TWlkZGxld2FyZSB9IGZyb20gJ2h0dHAtcHJveHktbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQge1xuICBFTVBUWSxcbiAgT2JzZXJ2YWJsZSxcbiAgY29tYmluZUxhdGVzdCxcbiAgZnJvbSxcbiAgb2YsXG4gIHppcCxcbn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBjYXRjaEVycm9yLFxuICBjb25jYXRNYXAsXG4gIGRlYm91bmNlLFxuICBkZWJvdW5jZVRpbWUsXG4gIGRlbGF5LFxuICBmaW5hbGl6ZSxcbiAgaWdub3JlRWxlbWVudHMsXG4gIG1hcCxcbiAgbWFwVG8sXG4gIHN0YXJ0V2l0aCxcbiAgc3dpdGNoTWFwLFxuICB0YXAsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCAqIGFzIHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IHsgU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEnO1xuXG5pbXBvcnQgeyBnZXRBdmFpbGFibGVQb3J0LCBzcGF3bkFzT2JzZXJ2YWJsZSwgd2FpdFVudGlsU2VydmVySXNMaXN0ZW5pbmcgfSBmcm9tICcuL3V0aWxzJztcblxuLyoqIExvZyBtZXNzYWdlcyB0byBpZ25vcmUgYW5kIG5vdCByZWx5IHRvIHRoZSBsb2dnZXIgKi9cbmNvbnN0IElHTk9SRURfU1RET1VUX01FU1NBR0VTID0gW1xuICAnc2VydmVyIGxpc3RlbmluZyBvbicsXG4gICdBbmd1bGFyIGlzIHJ1bm5pbmcgaW4gdGhlIGRldmVsb3BtZW50IG1vZGUuIENhbGwgZW5hYmxlUHJvZE1vZGUoKSB0byBlbmFibGUgdGhlIHByb2R1Y3Rpb24gbW9kZS4nXG5dO1xuXG5cbmV4cG9ydCB0eXBlIFNTUkRldlNlcnZlckJ1aWxkZXJPcHRpb25zID0gU2NoZW1hICYganNvbi5Kc29uT2JqZWN0O1xuZXhwb3J0IHR5cGUgU1NSRGV2U2VydmVyQnVpbGRlck91dHB1dCA9IEJ1aWxkZXJPdXRwdXQgJiB7XG4gIGJhc2VVcmw/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZShcbiAgb3B0aW9uczogU1NSRGV2U2VydmVyQnVpbGRlck9wdGlvbnMsXG4gIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LFxuKTogT2JzZXJ2YWJsZTxTU1JEZXZTZXJ2ZXJCdWlsZGVyT3V0cHV0PiB7XG4gIGNvbnN0IGJyb3dzZXJUYXJnZXQgPSB0YXJnZXRGcm9tVGFyZ2V0U3RyaW5nKG9wdGlvbnMuYnJvd3NlclRhcmdldCk7XG4gIGNvbnN0IHNlcnZlclRhcmdldCA9IHRhcmdldEZyb21UYXJnZXRTdHJpbmcob3B0aW9ucy5zZXJ2ZXJUYXJnZXQpO1xuICBjb25zdCBnZXRCYXNlVXJsID0gKGJzOiBicm93c2VyU3luYy5Ccm93c2VyU3luY0luc3RhbmNlKSA9PiBgJHticy5nZXRPcHRpb24oJ3NjaGVtZScpfTovLyR7YnMuZ2V0T3B0aW9uKCdob3N0Jyl9OiR7YnMuZ2V0T3B0aW9uKCdwb3J0Jyl9YDtcblxuICBjb25zdCBicm93c2VyVGFyZ2V0UnVuID0gY29udGV4dC5zY2hlZHVsZVRhcmdldChicm93c2VyVGFyZ2V0LCB7XG4gICAgc2VydmljZVdvcmtlcjogZmFsc2UsXG4gICAgd2F0Y2g6IHRydWUsXG4gICAgcHJvZ3Jlc3M6IG9wdGlvbnMucHJvZ3Jlc3MsXG4gIH0pO1xuXG4gIGNvbnN0IHNlcnZlclRhcmdldFJ1biA9IGNvbnRleHQuc2NoZWR1bGVUYXJnZXQoc2VydmVyVGFyZ2V0LCB7XG4gICAgd2F0Y2g6IHRydWUsXG4gICAgcHJvZ3Jlc3M6IG9wdGlvbnMucHJvZ3Jlc3MsXG4gIH0pO1xuXG4gIGNvbnN0IGJzSW5zdGFuY2UgPSBicm93c2VyU3luYy5jcmVhdGUoKTtcblxuICBjb250ZXh0LmxvZ2dlci5lcnJvcih0YWdzLnN0cmlwSW5kZW50c2BcbiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICBUaGlzIGlzIGEgc2ltcGxlIHNlcnZlciBmb3IgdXNlIGluIHRlc3Rpbmcgb3IgZGVidWdnaW5nIEFuZ3VsYXIgYXBwbGljYXRpb25zIGxvY2FsbHkuXG4gIEl0IGhhc24ndCBiZWVuIHJldmlld2VkIGZvciBzZWN1cml0eSBpc3N1ZXMuXG5cbiAgRE9OJ1QgVVNFIElUIEZPUiBQUk9EVUNUSU9OIVxuICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gYCk7XG5cbiAgcmV0dXJuIHppcChcbiAgICBicm93c2VyVGFyZ2V0UnVuLFxuICAgIHNlcnZlclRhcmdldFJ1bixcbiAgICBnZXRBdmFpbGFibGVQb3J0KCksXG4gICkucGlwZShcbiAgICBzd2l0Y2hNYXAoKFticiwgc3IsIG5vZGVTZXJ2ZXJQb3J0XSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW2JyLm91dHB1dCwgc3Iub3V0cHV0XSkucGlwZShcbiAgICAgICAgLy8gVGhpcyBpcyBuZWVkZWQgc28gdGhhdCBpZiBib3RoIHNlcnZlciBhbmQgYnJvd3NlciBlbWl0IGNsb3NlIHRvIGVhY2ggb3RoZXJcbiAgICAgICAgLy8gd2Ugb25seSBlbWl0IG9uY2UuIFRoaXMgdHlwaWNhbGx5IGhhcHBlbnMgb24gdGhlIGZpcnN0IGJ1aWxkLlxuICAgICAgICBkZWJvdW5jZVRpbWUoMTIwKSxcbiAgICAgICAgc3dpdGNoTWFwKChbYiwgc10pID0+IHtcbiAgICAgICAgICBpZiAoIXMuc3VjY2VzcyB8fCAhYi5zdWNjZXNzKSB7XG4gICAgICAgICAgICByZXR1cm4gb2YoW2IsIHNdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gc3RhcnROb2RlU2VydmVyKHMsIG5vZGVTZXJ2ZXJQb3J0LCBjb250ZXh0LmxvZ2dlciwgISFvcHRpb25zLmluc3BlY3QpLnBpcGUoXG4gICAgICAgICAgICBtYXBUbyhbYiwgc10pLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnIgPT4ge1xuICAgICAgICAgICAgICBjb250ZXh0LmxvZ2dlci5lcnJvcihgQSBzZXJ2ZXIgZXJyb3IgaGFzIG9jY3VycmVkLlxcbiR7bWFwRXJyb3JUb01lc3NhZ2UoZXJyKX1gKTtcblxuICAgICAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgbWFwKChbYiwgc10pID0+IChbXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3VjY2VzczogYi5zdWNjZXNzICYmIHMuc3VjY2VzcyxcbiAgICAgICAgICAgIGVycm9yOiBiLmVycm9yIHx8IHMuZXJyb3IsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBub2RlU2VydmVyUG9ydCxcbiAgICAgICAgXSBhcyBbU1NSRGV2U2VydmVyQnVpbGRlck91dHB1dCwgbnVtYmVyXSkpLFxuICAgICAgICB0YXAoKFtidWlsZGVyT3V0cHV0XSkgPT4ge1xuICAgICAgICAgIGlmIChidWlsZGVyT3V0cHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oJ1xcbkNvbXBpbGVkIHN1Y2Nlc3NmdWxseS4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBkZWJvdW5jZSgoW2J1aWxkZXJPdXRwdXRdKSA9PiBidWlsZGVyT3V0cHV0LnN1Y2Nlc3MgJiYgIW9wdGlvbnMuaW5zcGVjdFxuICAgICAgICAgID8gd2FpdFVudGlsU2VydmVySXNMaXN0ZW5pbmcobm9kZVNlcnZlclBvcnQpXG4gICAgICAgICAgOiBFTVBUWSlcbiAgICAgICk7XG4gICAgfSksXG4gICAgY29uY2F0TWFwKChbYnVpbGRlck91dHB1dCwgbm9kZVNlcnZlclBvcnRdKSA9PiB7XG4gICAgICBpZiAoIWJ1aWxkZXJPdXRwdXQuc3VjY2Vzcykge1xuICAgICAgICByZXR1cm4gb2YoYnVpbGRlck91dHB1dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChic0luc3RhbmNlLmFjdGl2ZSkge1xuICAgICAgICBic0luc3RhbmNlLnJlbG9hZCgpO1xuXG4gICAgICAgIHJldHVybiBvZihidWlsZGVyT3V0cHV0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmcm9tKGluaXRCcm93c2VyU3luYyhic0luc3RhbmNlLCBub2RlU2VydmVyUG9ydCwgb3B0aW9ucykpXG4gICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICB0YXAoYnMgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBiYXNlVXJsID0gZ2V0QmFzZVVybChicyk7XG4gICAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8odGFncy5vbmVMaW5lYFxuICAgICAgICAgICAgICAgICoqXG4gICAgICAgICAgICAgICAgQW5ndWxhciBVbml2ZXJzYWwgTGl2ZSBEZXZlbG9wbWVudCBTZXJ2ZXIgaXMgbGlzdGVuaW5nIG9uICR7YmFzZVVybH0sXG4gICAgICAgICAgICAgICAgb3BlbiB5b3VyIGJyb3dzZXIgb24gJHtiYXNlVXJsfVxuICAgICAgICAgICAgICAgICoqXG4gICAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBtYXBUbyhidWlsZGVyT3V0cHV0KSxcbiAgICAgICAgICApO1xuICAgICAgfVxuICAgIH0pLFxuICAgIG1hcChidWlsZGVyT3V0cHV0ID0+ICh7XG4gICAgICBzdWNjZXNzOiBidWlsZGVyT3V0cHV0LnN1Y2Nlc3MsXG4gICAgICBlcnJvcjogYnVpbGRlck91dHB1dC5lcnJvcixcbiAgICAgIGJhc2VVcmw6IGJzSW5zdGFuY2UgJiYgZ2V0QmFzZVVybChic0luc3RhbmNlKSxcbiAgICB9IGFzIFNTUkRldlNlcnZlckJ1aWxkZXJPdXRwdXQpKSxcbiAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICBpZiAoYnNJbnN0YW5jZSkge1xuICAgICAgICBic0luc3RhbmNlLmV4aXQoKTtcbiAgICAgICAgYnNJbnN0YW5jZS5jbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgY2F0Y2hFcnJvcihlcnJvciA9PiBvZih7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIGVycm9yOiBtYXBFcnJvclRvTWVzc2FnZShlcnJvciksXG4gICAgfSkpLFxuICApO1xufVxuXG5mdW5jdGlvbiBzdGFydE5vZGVTZXJ2ZXIoXG4gIHNlcnZlck91dHB1dDogQnVpbGRlck91dHB1dCxcbiAgcG9ydDogbnVtYmVyLFxuICBsb2dnZXI6IGxvZ2dpbmcuTG9nZ2VyQXBpLFxuICBpbnNwZWN0TW9kZSA9IGZhbHNlLFxuKTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gIGNvbnN0IG91dHB1dFBhdGggPSBzZXJ2ZXJPdXRwdXQub3V0cHV0UGF0aCBhcyBzdHJpbmc7XG4gIGNvbnN0IHBhdGggPSBqb2luKG91dHB1dFBhdGgsICdtYWluLmpzJyk7XG4gIGNvbnN0IGVudiA9IHsgLi4ucHJvY2Vzcy5lbnYsIFBPUlQ6ICcnICsgcG9ydCB9O1xuXG4gIGNvbnN0IGFyZ3MgPSBbYFwiJHtwYXRofVwiYF07XG4gIGlmIChpbnNwZWN0TW9kZSkge1xuICAgIGFyZ3MudW5zaGlmdCgnLS1pbnNwZWN0LWJyaycpO1xuICB9XG5cbiAgcmV0dXJuIG9mKG51bGwpXG4gICAgLnBpcGUoXG4gICAgICBkZWxheSgwKSwgLy8gQXZvaWQgRUFERFJJTlVTRSBlcnJvciBzaW5jZSBpdCB3aWxsIGNhdXNlIHRoZSBraWxsIGV2ZW50IHRvIGJlIGZpbmlzaC5cbiAgICAgIHN3aXRjaE1hcCgoKSA9PiBzcGF3bkFzT2JzZXJ2YWJsZSgnbm9kZScsIGFyZ3MsIHsgZW52LCBzaGVsbDogdHJ1ZSB9KSksXG4gICAgICB0YXAoKHsgc3RkZXJyLCBzdGRvdXQgfSkgPT4ge1xuICAgICAgICBpZiAoc3RkZXJyKSB7XG4gICAgICAgICAgbG9nZ2VyLmVycm9yKHN0ZGVycik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3Rkb3V0ICYmICFJR05PUkVEX1NURE9VVF9NRVNTQUdFUy5zb21lKHggPT4gc3Rkb3V0LmluY2x1ZGVzKHgpKSkge1xuICAgICAgICAgIGxvZ2dlci5pbmZvKHN0ZG91dCk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgaWdub3JlRWxlbWVudHMoKSxcbiAgICAgIC8vIEVtaXQgYSBzaWduYWwgYWZ0ZXIgdGhlIHByb2Nlc3MgaGFzIGJlZW4gc3RhcnRlZFxuICAgICAgc3RhcnRXaXRoKHVuZGVmaW5lZCksXG4gICAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gaW5pdEJyb3dzZXJTeW5jKFxuICBicm93c2VyU3luY0luc3RhbmNlOiBicm93c2VyU3luYy5Ccm93c2VyU3luY0luc3RhbmNlLFxuICBub2RlU2VydmVyUG9ydDogbnVtYmVyLFxuICBvcHRpb25zOiBTU1JEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyxcbik6IFByb21pc2U8YnJvd3NlclN5bmMuQnJvd3NlclN5bmNJbnN0YW5jZT4ge1xuICBpZiAoYnJvd3NlclN5bmNJbnN0YW5jZS5hY3RpdmUpIHtcbiAgICByZXR1cm4gYnJvd3NlclN5bmNJbnN0YW5jZTtcbiAgfVxuXG4gIGNvbnN0IHsgcG9ydDogYnJvd3NlclN5bmNQb3J0LCBvcGVuLCBob3N0LCBwdWJsaWNIb3N0IH0gPSBvcHRpb25zO1xuICBjb25zdCBic1BvcnQgPSBicm93c2VyU3luY1BvcnQgfHwgYXdhaXQgZ2V0QXZhaWxhYmxlUG9ydCgpO1xuICBjb25zdCBic09wdGlvbnM6IGJyb3dzZXJTeW5jLk9wdGlvbnMgPSB7XG4gICAgcHJveHk6IHtcbiAgICAgIHRhcmdldDogYGxvY2FsaG9zdDoke25vZGVTZXJ2ZXJQb3J0fWAsXG4gICAgICBwcm94eU9wdGlvbnM6IHtcbiAgICAgICAgeGZ3ZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHByb3h5UmVzOiBbXG4gICAgICAgIHByb3h5UmVzID0+IHtcbiAgICAgICAgICBpZiAoJ2hlYWRlcnMnIGluIHByb3h5UmVzKSB7XG4gICAgICAgICAgICBwcm94eVJlcy5oZWFkZXJzWydjYWNoZS1jb250cm9sJ10gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgXVxuICAgICAgLy8gcHJveHlPcHRpb25zIGlzIG5vdCBpbiB0aGUgdHlwaW5nc1xuICAgIH0gYXMgYnJvd3NlclN5bmMuUHJveHlPcHRpb25zICYgeyBwcm94eU9wdGlvbnM6IHsgeGZ3ZDogYm9vbGVhbiB9IH0sXG4gICAgaG9zdCxcbiAgICBwb3J0OiBic1BvcnQsXG4gICAgdWk6IGZhbHNlLFxuICAgIHNlcnZlcjogZmFsc2UsXG4gICAgbm90aWZ5OiBmYWxzZSxcbiAgICBnaG9zdE1vZGU6IGZhbHNlLFxuICAgIGxvZ0xldmVsOiAnc2lsZW50JyxcbiAgICBvcGVuLFxuICB9O1xuXG4gIGNvbnN0IHB1YmxpY0hvc3ROb3JtYWxpemVkID0gcHVibGljSG9zdCAmJiBwdWJsaWNIb3N0LmVuZHNXaXRoKCcvJylcbiAgICA/IHB1YmxpY0hvc3Quc3Vic3RyaW5nKDAsIHB1YmxpY0hvc3QubGVuZ3RoIC0gMSlcbiAgICA6IHB1YmxpY0hvc3Q7XG5cbiAgaWYgKHB1YmxpY0hvc3ROb3JtYWxpemVkKSB7XG4gICAgY29uc3QgeyBwcm90b2NvbCwgaG9zdG5hbWUsIHBvcnQsIHBhdGhuYW1lIH0gPSB1cmwucGFyc2UocHVibGljSG9zdE5vcm1hbGl6ZWQpO1xuICAgIGNvbnN0IGRlZmF1bHRTb2NrZXRJb1BhdGggPSAnL2Jyb3dzZXItc3luYy9zb2NrZXQuaW8nO1xuICAgIGNvbnN0IGRlZmF1bHROYW1lc3BhY2UgPSAnL2Jyb3dzZXItc3luYyc7XG4gICAgY29uc3QgaGFzUGF0aG5hbWUgPSAhIShwYXRobmFtZSAmJiBwYXRobmFtZSAhPT0gJy8nKTtcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBoYXNQYXRobmFtZSA/IHBhdGhuYW1lICsgZGVmYXVsdE5hbWVzcGFjZSA6IGRlZmF1bHROYW1lc3BhY2U7XG4gICAgY29uc3QgcGF0aCA9IGhhc1BhdGhuYW1lID8gcGF0aG5hbWUgKyBkZWZhdWx0U29ja2V0SW9QYXRoIDogZGVmYXVsdFNvY2tldElvUGF0aDtcblxuICAgIGJzT3B0aW9ucy5zb2NrZXQgPSB7XG4gICAgICBuYW1lc3BhY2UsXG4gICAgICBwYXRoLFxuICAgICAgZG9tYWluOiB1cmwuZm9ybWF0KHtcbiAgICAgICAgcHJvdG9jb2wsXG4gICAgICAgIGhvc3RuYW1lLFxuICAgICAgICBwb3J0LFxuICAgICAgfSksXG4gICAgfTtcblxuICAgIC8vIFdoZW4gaGF2aW5nIGEgcGF0aG5hbWUgd2UgYWxzbyBuZWVkIHRvIGNyZWF0ZSBhIHJldmVyc2UgcHJveHkgYmVjYXVzZSBzb2NrZXQuaW9cbiAgICAvLyB3aWxsIGJlIGxpc3RlbmluZyBvbjogJ2h0dHA6Ly9sb2NhbGhvc3Q6NDIwMC9zc3IvYnJvd3Nlci1zeW5jL3NvY2tldC5pbydcbiAgICAvLyBIb3dldmVyIHVzZXJzIHdpbGwgdHlwaWNhbGx5IGhhdmUgYSByZXZlcnNlIHByb3h5IHRoYXQgd2lsbCByZWRpcmVjdCBhbGwgbWF0Y2hpbmcgcmVxdWVzdHNcbiAgICAvLyBleDogaHR0cDovL3Rlc3Rpbmdob3N0LmNvbS9zc3IgLT4gaHR0cDovL2xvY2FsaG9zdDo0MjAwIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgNDA0LlxuICAgIGlmIChoYXNQYXRobmFtZSkge1xuICAgICAgLy8gUmVtb3ZlIGxlYWRpbmcgc2xhc2hcbiAgICAgIGJzT3B0aW9ucy5zY3JpcHRQYXRoID0gcCA9PiBwLnN1YnN0cmluZygxKSxcbiAgICAgICAgYnNPcHRpb25zLm1pZGRsZXdhcmUgPSBbXG4gICAgICAgICAgY3JlYXRlUHJveHlNaWRkbGV3YXJlKGRlZmF1bHRTb2NrZXRJb1BhdGgsIHtcbiAgICAgICAgICAgIHRhcmdldDogdXJsLmZvcm1hdCh7XG4gICAgICAgICAgICAgIHByb3RvY29sOiAnaHR0cCcsXG4gICAgICAgICAgICAgIGhvc3RuYW1lOiBob3N0LFxuICAgICAgICAgICAgICBwb3J0OiBic1BvcnQsXG4gICAgICAgICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB3czogdHJ1ZSxcbiAgICAgICAgICAgIGxvZ0xldmVsOiAnc2lsZW50JyxcbiAgICAgICAgICB9KSBhcyBhbnksXG4gICAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBicm93c2VyU3luY0luc3RhbmNlLmluaXQoYnNPcHRpb25zLCAoZXJyb3IsIGJzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoYnMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFwRXJyb3JUb01lc3NhZ2UoZXJyb3I6IHVua25vd24pOiBzdHJpbmcge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJ1aWxkZXI8U1NSRGV2U2VydmVyQnVpbGRlck9wdGlvbnMsIEJ1aWxkZXJPdXRwdXQ+KGV4ZWN1dGUpO1xuIl19