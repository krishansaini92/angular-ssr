import { __awaiter } from "tslib";
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ResourceLoader } from '@angular/compiler';
import { CompilerFactory, NgModuleFactory } from '@angular/core';
import { INITIAL_CONFIG, platformDynamicServer, renderModuleFactory } from '@angular/platform-server';
import { dirname, resolve } from 'path';
import { FileLoader } from './file-loader';
import { InlineCriticalCssProcessor } from './inline-css-processor';
import { exists, readFile } from './utils';
/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
export class CommonEngine {
    constructor(moduleOrFactory, providers = []) {
        this.moduleOrFactory = moduleOrFactory;
        this.providers = providers;
        this.factoryCacheMap = new Map();
        this.templateCache = new Map();
        this.pageExists = new Map();
        this.inlineCriticalCssProcessor = new InlineCriticalCssProcessor({
            minify: true,
        });
    }
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     */
    render(opts) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (opts.publicPath && opts.documentFilePath && opts.url !== undefined) {
                const url = new URL(opts.url);
                // Remove leading forward slash.
                const pathname = url.pathname.substring(1);
                const pagePath = resolve(opts.publicPath, pathname, 'index.html');
                if (pagePath !== resolve(opts.documentFilePath)) {
                    // View path doesn't match with prerender path.
                    let pageExists = this.pageExists.get(pagePath);
                    if (pageExists === undefined) {
                        pageExists = yield exists(pagePath);
                        this.pageExists.set(pagePath, pageExists);
                    }
                    if (pageExists) {
                        // Serve pre-rendered page.
                        return readFile(pagePath, 'utf-8');
                    }
                }
            }
            // if opts.document dosen't exist then opts.documentFilePath must
            const extraProviders = [
                ...(opts.providers || []),
                ...(this.providers || []),
            ];
            let doc = opts.document;
            if (!doc && opts.documentFilePath) {
                doc = yield this.getDocument(opts.documentFilePath);
            }
            if (doc) {
                extraProviders.push({
                    provide: INITIAL_CONFIG,
                    useValue: {
                        document: opts.inlineCriticalCss
                            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
                            ? doc.replace(/ media=\"print\" onload=\"this\.media='all'"><noscript><link .+?><\/noscript>/g, '>')
                            : doc,
                        url: opts.url
                    }
                });
            }
            const moduleOrFactory = this.moduleOrFactory || opts.bootstrap;
            const factory = yield this.getFactory(moduleOrFactory);
            const html = yield renderModuleFactory(factory, { extraProviders });
            if (!opts.inlineCriticalCss) {
                return html;
            }
            const { content, errors, warnings } = yield this.inlineCriticalCssProcessor.process(html, {
                outputPath: (_a = opts.publicPath) !== null && _a !== void 0 ? _a : (opts.documentFilePath ? dirname(opts.documentFilePath) : undefined),
            });
            // tslint:disable-next-line: no-console
            warnings.forEach(m => console.warn(m));
            // tslint:disable-next-line: no-console
            errors.forEach(m => console.error(m));
            return content;
        });
    }
    /** Return the factory for a given engine instance */
    getFactory(moduleOrFactory) {
        return __awaiter(this, void 0, void 0, function* () {
            // If module has been compiled AoT
            if (moduleOrFactory instanceof NgModuleFactory) {
                return moduleOrFactory;
            }
            else {
                // we're in JIT mode
                const moduleFactory = this.factoryCacheMap.get(moduleOrFactory);
                // If module factory is cached
                if (moduleFactory) {
                    return moduleFactory;
                }
                // Compile the module and cache it
                const factory = yield this.getCompiler().compileModuleAsync(moduleOrFactory);
                this.factoryCacheMap.set(moduleOrFactory, factory);
                return factory;
            }
        });
    }
    /** Retrieve the document from the cache or the filesystem */
    getDocument(filePath) {
        return __awaiter(this, void 0, void 0, function* () {
            let doc = this.templateCache.get(filePath);
            if (!doc) {
                doc = yield readFile(filePath, 'utf-8');
                this.templateCache.set(filePath, doc);
            }
            return doc;
        });
    }
    /** Return an instance of the platformServer compiler */
    getCompiler() {
        const compilerFactory = platformDynamicServer().injector.get(CompilerFactory);
        return compilerFactory.createCompiler([
            { providers: [{ provide: ResourceLoader, useClass: FileLoader, deps: [] }] }
        ]);
    }
}
//# sourceMappingURL=data:application/json;base64,